{"title":"并行编程实验一","uid":"ac8a9fab2e0576f4044deb8564018f33","slug":"并行编程实验一","date":"2023-04-17T14:35:33.000Z","updated":"2024-02-22T03:52:13.965Z","comments":true,"path":"api/articles/并行编程实验一.json","keywords":"计算机技术,大数据,人工智能","cover":null,"content":"<h2 id=\"实验内容\"><a href=\"#实验内容\" class=\"headerlink\" title=\"实验内容\"></a>实验内容</h2><p>实验内容一：以数据划分的方式并行计算PI值</p>\n<p>实验内容二：CPU多核编程——线程池开发<br>要求基于生产者—消费者模式进行框架开发，具体工作需求可以简化，但需要有线程管理和同步。</p>\n<h2 id=\"计算Pi\"><a href=\"#计算Pi\" class=\"headerlink\" title=\"计算Pi\"></a>计算Pi</h2><h3 id=\"思路简述\"><a href=\"#思路简述\" class=\"headerlink\" title=\"思路简述\"></a>思路简述</h3><p>依据莱布尼兹公式，通过多线程计算较多的次数，逼近$\\pi$ 。用多线程的方式进行数据划分、即每个线程分担处理部分数据，从而进行加速。<br>同时由于多线程访问全局的结果可能会有冲突，因此使用互斥量和信号量组织线程有序将局部结果加到全局结果中。</p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">c</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">#include</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">&lt;</span><span style=\"color: #F1FA8C\">pthread.h</span><span style=\"color: #E9F284\">&gt;</span><span style=\"color: #F8F8F2\">  </span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">#include</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">&lt;</span><span style=\"color: #F1FA8C\">stdio.h</span><span style=\"color: #E9F284\">&gt;</span><span style=\"color: #F8F8F2\">  </span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">#include</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">&lt;</span><span style=\"color: #F1FA8C\">stdlib.h</span><span style=\"color: #E9F284\">&gt;</span><span style=\"color: #F8F8F2\">  </span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">#include</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #E9F284\">&lt;</span><span style=\"color: #F1FA8C\">math.h</span><span style=\"color: #E9F284\">&gt;</span><span style=\"color: #F8F8F2\">  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> BLOCK_SIZE </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">100000</span><span style=\"color: #F8F8F2\">;  </span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">double</span><span style=\"color: #F8F8F2\"> sum </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;  </span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> num_threads;  </span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">// 定义互斥量和条件变量  </span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">pthread_mutex_t</span><span style=\"color: #F8F8F2\"> mutex </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> PTHREAD_MUTEX_INITIALIZER;  </span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">pthread_cond_t</span><span style=\"color: #F8F8F2\"> cond </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> PTHREAD_COND_INITIALIZER;  </span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #50FA7B\">calculate_block</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #FFB86C; font-style: italic\">thread_id</span><span style=\"color: #F8F8F2\">)  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#123;  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">long</span><span style=\"color: #F8F8F2\"> id </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">long</span><span style=\"color: #F8F8F2\">)thread_id;  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> start </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> id </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> BLOCK_SIZE;  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> end </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> start </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> BLOCK_SIZE;  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">double</span><span style=\"color: #F8F8F2\"> block_sum </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> start; i </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> end; i</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">) &#123;  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">double</span><span style=\"color: #F8F8F2\"> term </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">pow</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">-</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">, i) </span><span style=\"color: #FF79C6\">/</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">);  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        block_sum </span><span style=\"color: #FF79C6\">+=</span><span style=\"color: #F8F8F2\"> term;  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#125;  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">pthread_mutex_lock</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">mutex);  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    sum </span><span style=\"color: #FF79C6\">+=</span><span style=\"color: #F8F8F2\"> block_sum;    </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">pthread_mutex_unlock</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">mutex);  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">pthread_cond_signal</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">cond);  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;  </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">main</span><span style=\"color: #F8F8F2\">()  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#123;  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    num_threads </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">8</span><span style=\"color: #F8F8F2\">;  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">pthread_t</span><span style=\"color: #F8F8F2\"> threads[num_threads];  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">long</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; i </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> num_threads; i</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">pthread_create</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">threads[i], </span><span style=\"color: #BD93F9\">NULL</span><span style=\"color: #F8F8F2\">, calculate_block, (</span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">)i);  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; i </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> num_threads; i </span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">pthread_join</span><span style=\"color: #F8F8F2\">(threads[i], </span><span style=\"color: #BD93F9\">NULL</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">printf</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">&quot;</span><span style=\"color: #BD93F9\">%lf</span><span style=\"color: #E9F284\">&quot;</span><span style=\"color: #F8F8F2\">, sum </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">4</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;</span></span></code></pre></div><h2 id=\"线程池设计\"><a href=\"#线程池设计\" class=\"headerlink\" title=\"线程池设计\"></a>线程池设计</h2><h3 id=\"线程池实现\"><a href=\"#线程池实现\" class=\"headerlink\" title=\"线程池实现\"></a>线程池实现</h3><p>使用一个任务队列作为生产者和消费者之间的缓冲区，任务队列中的每一个元素包含要执行的函数和函数参数，对应代码如下:</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">c</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">typedef</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">struct</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">task_t</span><span style=\"color: #F8F8F2\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">func)(</span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">arg;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125; </span><span style=\"color: #8BE9FD; font-style: italic\">task_t</span><span style=\"color: #F8F8F2\">;</span></span></code></pre></div><p>线程池包含一个任务队列、若干线程、互斥量与信号量以及其它关键属性，定义如下：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">c</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">typedef</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">struct</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">thread_pool_t</span><span style=\"color: #F8F8F2\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">pthread_t</span><span style=\"color: #F8F8F2\"> threads[MAX_THREADS];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> num_threads;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">task_t</span><span style=\"color: #F8F8F2\"> queue[MAX_QUEUE];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> front, rear, size;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">pthread_mutex_t</span><span style=\"color: #F8F8F2\"> mutex;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">pthread_cond_t</span><span style=\"color: #F8F8F2\"> cond;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">bool</span><span style=\"color: #F8F8F2\"> shutdown;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125; </span><span style=\"color: #8BE9FD; font-style: italic\">thread_pool_t</span><span style=\"color: #F8F8F2\">;</span></span></code></pre></div><p>在生产者方面，<code>thread_pool_enqueue</code>函数用于将任务添加到任务队列中。当生产者生产了一个任务后，它首先会通过线程池的互斥锁<code>pool-&gt;mutex</code>来保护任务队列，防止多个线程同时修改任务队列，然后使用条件变量<code>pool-&gt;cond</code>来通知消费者有新的任务到达。</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">c</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">bool</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">thread_pool_enqueue</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">thread_pool_t</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #FFB86C; font-style: italic\">pool</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">func)(</span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">), </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #FFB86C; font-style: italic\">arg</span><span style=\"color: #F8F8F2\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">pthread_mutex_lock</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">mutex);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">size </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> MAX_QUEUE) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">pthread_mutex_unlock</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">mutex);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">false</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">task_t</span><span style=\"color: #F8F8F2\"> task </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> &#123; .func </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> func, .arg </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> arg &#125;;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">queue[pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">rear] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> task;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">rear </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">rear </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">) </span><span style=\"color: #FF79C6\">%</span><span style=\"color: #F8F8F2\"> MAX_QUEUE;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">size</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">pthread_cond_signal</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">cond);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">pthread_mutex_unlock</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">mutex);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">true</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;</span></span></code></pre></div><p>在消费者方面，<code>thread_pool_worker</code>函数用于从任务队列中取出任务并执行。当消费者从任务队列中取出一个任务时，它会使用互斥锁<code>pool-&gt;mutex</code>来保护任务队列。如果任务队列为空，消费者将会被条件变量<code>pool-&gt;mutex</code>阻塞，等待生产者添加新的任务到任务队列中。</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">c</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #50FA7B\">thread_pool_worker</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #FFB86C; font-style: italic\">arg</span><span style=\"color: #F8F8F2\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">thread_pool_t</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">pool </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #8BE9FD; font-style: italic\">thread_pool_t</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">)arg;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">while</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #BD93F9\">true</span><span style=\"color: #F8F8F2\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">pthread_mutex_lock</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">mutex);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">while</span><span style=\"color: #F8F8F2\"> (pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">size </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">!</span><span style=\"color: #F8F8F2\">pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">shutdown)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #50FA7B\">pthread_cond_wait</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">cond, </span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">mutex);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">size </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">shutdown) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #50FA7B\">pthread_mutex_unlock</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">mutex);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #50FA7B\">pthread_exit</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">NULL</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #8BE9FD; font-style: italic\">task_t</span><span style=\"color: #F8F8F2\"> task </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">queue[pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">front];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">front </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">front </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">) </span><span style=\"color: #FF79C6\">%</span><span style=\"color: #F8F8F2\"> MAX_QUEUE;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">size</span><span style=\"color: #FF79C6\">--</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">pthread_mutex_unlock</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">mutex);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        task.</span><span style=\"color: #50FA7B\">func</span><span style=\"color: #F8F8F2\">(task.arg);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;</span></span></code></pre></div><p>线程池的启动包括初始化任务队列、信号量、启动消费者线程；线程池的关闭最重要的是等待所有线程运行结束；两者实现如下：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">c</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">thread_pool_init</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">thread_pool_t</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #FFB86C; font-style: italic\">pool</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">num_threads</span><span style=\"color: #F8F8F2\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">num_threads </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> num_threads;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">front </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">rear </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">size </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">shutdown </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">false</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">pthread_mutex_init</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">mutex, </span><span style=\"color: #BD93F9\">NULL</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">pthread_cond_init</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">cond, </span><span style=\"color: #BD93F9\">NULL</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; i </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> num_threads; i</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">pthread_create</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">threads[i], </span><span style=\"color: #BD93F9\">NULL</span><span style=\"color: #F8F8F2\">, thread_pool_worker, pool);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">thread_pool_shutdown</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">thread_pool_t</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #FFB86C; font-style: italic\">pool</span><span style=\"color: #F8F8F2\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">pthread_mutex_lock</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">mutex);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">shutdown </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">true</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">pthread_cond_broadcast</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">cond);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">pthread_mutex_unlock</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">mutex);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; i </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">num_threads; i</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">pthread_join</span><span style=\"color: #F8F8F2\">(pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">threads[i], </span><span style=\"color: #BD93F9\">NULL</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">pthread_mutex_destroy</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">mutex);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">pthread_cond_destroy</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">pool</span><span style=\"color: #FF79C6\">-&gt;</span><span style=\"color: #F8F8F2\">cond);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;</span></span></code></pre></div><p>设计一个简单的任务，输出任务id与线程id，并放到线程池运行：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">c</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">my_task</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #FFB86C; font-style: italic\">arg</span><span style=\"color: #F8F8F2\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">num </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">)arg;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">printf</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">&quot;</span><span style=\"color: #F1FA8C\">Task </span><span style=\"color: #BD93F9\">%d</span><span style=\"color: #F1FA8C\"> by thread </span><span style=\"color: #BD93F9\">%lu</span><span style=\"color: #FF79C6\">\\n</span><span style=\"color: #E9F284\">&quot;</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">num, </span><span style=\"color: #50FA7B\">pthread_self</span><span style=\"color: #F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">free</span><span style=\"color: #F8F8F2\">(num);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">main</span><span style=\"color: #F8F8F2\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #8BE9FD; font-style: italic\">thread_pool_t</span><span style=\"color: #F8F8F2\"> pool;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">thread_pool_init</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">pool, </span><span style=\"color: #BD93F9\">8</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; i </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">20</span><span style=\"color: #F8F8F2\">; i</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">num </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">malloc</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">sizeof</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\">));</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">num </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> i;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">thread_pool_enqueue</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">pool, my_task, num);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">printf</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">&quot;</span><span style=\"color: #F1FA8C\">main thread </span><span style=\"color: #BD93F9\">%lu</span><span style=\"color: #FF79C6\">\\n</span><span style=\"color: #E9F284\">&quot;</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #50FA7B\">pthread_self</span><span style=\"color: #F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">thread_pool_shutdown</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">pool);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;</span></span></code></pre></div><h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p>在ubuntu 20中编译<code>gcc tp.c -o tp -lpthread</code>，运行结果描述如下：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">txt</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">Task 0 by thread 140422668744478</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">Task 4 by thread 140422668744456</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">Task 5 by thread 140422668744434</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">...</span></span></code></pre></div><h3 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h3><p>使用线程池完成矩阵相加$a+b&#x3D;c$，相应的任务函数如下：</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">c</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">add_matrix</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #FFB86C; font-style: italic\">arg</span><span style=\"color: #F8F8F2\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">num </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">)arg;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> st </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">num, ed </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> st </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">5</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> st; i </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> ed; i</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        c[i] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> a[i] </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> b[i];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">printf</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">&quot;</span><span style=\"color: #F1FA8C\">Task [add_matrix] </span><span style=\"color: #BD93F9\">%d</span><span style=\"color: #F1FA8C\"> by thread </span><span style=\"color: #BD93F9\">%lu</span><span style=\"color: #F1FA8C\">, range = </span><span style=\"color: #BD93F9\">%d</span><span style=\"color: #F1FA8C\"> ~ </span><span style=\"color: #BD93F9\">%d</span><span style=\"color: #F1FA8C\"> </span><span style=\"color: #FF79C6\">\\n</span><span style=\"color: #E9F284\">&quot;</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">num </span><span style=\"color: #FF79C6\">/</span><span style=\"color: #BD93F9\">5</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #50FA7B\">pthread_self</span><span style=\"color: #F8F8F2\">(), st, ed);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">free</span><span style=\"color: #F8F8F2\">(num);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;</span></span></code></pre></div>","text":"实验内容实验内容一：以数据划分的方式并行计算PI值 实验内容二：CPU多核编程——线程池开发要求基于生产者—消费者模式进行框架开发，具体工作需求可以简化，但需要...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"大数据","slug":"大数据","count":11,"path":"api/categories/大数据.json"}],"tags":[{"name":"学习笔记","slug":"学习笔记","count":17,"path":"api/tags/学习笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%AA%8C%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">实验内容</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97Pi\"><span class=\"toc-text\">计算Pi</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E7%AE%80%E8%BF%B0\"><span class=\"toc-text\">思路简述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">线程池设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">线程池实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">运行结果</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E6%B1%A0\"><span class=\"toc-text\">线程池</span></a></li></ol></li></ol>","author":{"name":"以太工坊","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"分享我的课程学习笔记、经验与有趣的小玩意.图片等资源无法加载时请使用代理","socials":{"github":"https://github.com/Tim-Saijun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"telegram":{"icon":"/img/telegram.svg","link":"https://t.me/tim_run"},"Email":{"icon":"/img/mail.svg","link":"mailto:b@zair.top"},"RSS":{"icon":"/img/rss.svg","link":"/atom.xml"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"概率论","uid":"243ac045dab981a42c4921f3f7cacfa2","slug":"概率论","date":"2023-04-21T12:10:13.000Z","updated":"2024-02-22T03:52:13.965Z","comments":true,"path":"api/articles/概率论.json","keywords":"计算机技术,大数据,人工智能","cover":null,"text":"主要参考 贝叶斯公式 贝叶斯学派认为没有什么是随机的，如果有，那一定是信息不够（香农信息论）；贝叶斯学派（统计学）-&gt; 贝叶斯学习(机器学习) 贝叶斯公式...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"数学","slug":"数学","count":2,"path":"api/categories/数学.json"}],"tags":[{"name":"学习笔记","slug":"学习笔记","count":17,"path":"api/tags/学习笔记.json"},{"name":"统计学","slug":"统计学","count":1,"path":"api/tags/统计学.json"}],"author":{"name":"以太工坊","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"分享我的课程学习笔记、经验与有趣的小玩意.图片等资源无法加载时请使用代理","socials":{"github":"https://github.com/Tim-Saijun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"telegram":{"icon":"/img/telegram.svg","link":"https://t.me/tim_run"},"Email":{"icon":"/img/mail.svg","link":"mailto:b@zair.top"},"RSS":{"icon":"/img/rss.svg","link":"/atom.xml"}}}}},"next_post":{"title":"Essence of Linear Algebra","uid":"895af0f03f87247c5b74532216cc5f3b","slug":"Essence-of-Linear-Algebra","date":"2023-04-12T06:47:45.000Z","updated":"2024-02-22T03:52:13.945Z","comments":true,"path":"api/articles/Essence-of-Linear-Algebra.json","keywords":"计算机技术,大数据,人工智能","cover":"https://yt3.ggpht.com/-waYunpNuwpY/AAAAAAAAAAI/AAAAAAAAAAA/UwFbmYRfzyo/s900-c-k-no-mo-rj-c0xffffff/photo.jpg","text":"中英对照表 English 中文 cross production 叉积 determinantion 行列式 eigenvalue 特征值 Vector Th...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"数学","slug":"数学","count":2,"path":"api/categories/数学.json"}],"tags":[{"name":"学习笔记","slug":"学习笔记","count":17,"path":"api/tags/学习笔记.json"},{"name":"线性代数","slug":"线性代数","count":1,"path":"api/tags/线性代数.json"}],"author":{"name":"以太工坊","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"分享我的课程学习笔记、经验与有趣的小玩意.图片等资源无法加载时请使用代理","socials":{"github":"https://github.com/Tim-Saijun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"telegram":{"icon":"/img/telegram.svg","link":"https://t.me/tim_run"},"Email":{"icon":"/img/mail.svg","link":"mailto:b@zair.top"},"RSS":{"icon":"/img/rss.svg","link":"/atom.xml"}}}}}}