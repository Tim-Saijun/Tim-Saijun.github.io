{"title":"大数据存储笔记","uid":"99230992a5d996b8504b4e44c8a0c83b","slug":"大数据存储复习笔记","date":"2023-02-19T10:00:00.000Z","updated":"2024-02-22T03:52:13.949Z","comments":true,"path":"api/articles/大数据存储复习笔记.json","keywords":"计算机技术,大数据,人工智能","cover":[],"content":"<h1 id=\"第一章\"><a href=\"#第一章\" class=\"headerlink\" title=\"第一章\"></a>第一章</h1><h3 id=\"产生背景\"><a href=\"#产生背景\" class=\"headerlink\" title=\"产生背景\"></a>产生背景</h3><p>横向拓展，水平拓展；用更多的节点支持更大量的请求。<br>纵向拓展，垂直拓展；扩展一个节点的能力支撑更大量的请求。<br>大数据的特点：volume，velocity，variety，value<br><u>横向拓展需求、系统可靠可用、一致性需求在传统的关系模型下无法有效解决</u></p>\n<h3 id=\"大数据需要怎样的存储\"><a href=\"#大数据需要怎样的存储\" class=\"headerlink\" title=\"大数据需要怎样的存储\"></a>大数据需要怎样的存储</h3><p>大数据存储的集群系统，需要满足：</p>\n<ol>\n<li>能够对集群内的<strong>计算机及存储资源</strong>进行统一管理、调度和监控</li>\n<li>能够对集群内的<strong>数据</strong>进行分散存储和统一管理</li>\n<li>集群内的计算机可以共同完成一个任务，<strong>分工</strong>协作、负载均衡</li>\n<li>当集群中某一台计算机发生<strong>故障</strong>，集群可以保证功能的有效性、且数据不会丢失（分区容错性）</li>\n<li>可以用简单的方式部署<strong>集群、扩展</strong>集群以及替换故障节点（伸缩性）</li>\n</ol>\n<h3 id=\"技术分类\"><a href=\"#技术分类\" class=\"headerlink\" title=\"技术分类\"></a>技术分类</h3><p>• 按元信息管理方式划分：<br>对等节点的策略，由于没有中心节点的束缚有更高的可用性。<br>中心节点的策略，更好的可扩展性。<br>• 按数据模型划分：<br>针对不同业务模型出现的不同数据模型的数据库<br>• 分布式架构<br>Partition All -分库分表<br>Partition Engine -Share Nothing<br>Partition Storage -Share Storage 存算分离</p>\n<h4 id=\"NoSQL与newSQL\"><a href=\"#NoSQL与newSQL\" class=\"headerlink\" title=\"NoSQL与newSQL\"></a>NoSQL与newSQL</h4><p>NoSQL是非关系型的数据库，主要用于解决SQL的可扩展性问题。不保证ACID特性，没有事务管理，无需多余操作就可以横向扩展；<br>NewSQL是关系型数据库，兼具Nosql数据库的海量存储管理能力和关系数据库的ACID特性和SQL便利性。</p>\n<h1 id=\"第二章\"><a href=\"#第二章\" class=\"headerlink\" title=\"第二章\"></a>第二章</h1><h3 id=\"基于C-S的层次结构\"><a href=\"#基于C-S的层次结构\" class=\"headerlink\" title=\"基于C/S的层次结构\"></a>基于C/S的层次结构</h3><h4 id=\"AP与DP\"><a href=\"#AP与DP\" class=\"headerlink\" title=\"AP与DP\"></a>AP与DP</h4><p>AP是面向用户的应用处理器，用于完成数据处理的软件，能向CM传递用户的请求和数据。<br>DP是数据处理器，负责进行数据管理，类似一个集中式数据库管理系统，接受CM传递的命令和数据并给予反馈。 </p>\n<h4 id=\"AP功能的变化\"><a href=\"#AP功能的变化\" class=\"headerlink\" title=\"AP功能的变化\"></a>AP功能的变化</h4><p> 集中库 -不存储数据，相当于输入，主机运行了所有软件<br> 多客户/单服务器 -应用、客户端服务（<strong>查询</strong>）、通信<br> 多客户/多服务器 -应用、客户端服务（<strong>目录管理、缓存管理、查询处理、提交协议</strong>）、通信<br> 瘦客户端/服务器 -客户端Server2Sever 上述功能转移给服务器，仅保留SQL接口与程序接口；AP是计算相关内容：<strong>目录管理、缓存管理、查询处理、事务处理、锁管理、访问控制</strong>。此外服务端还有存储相关功能：日志回放、故障恢复、索引设计、物理存储。</p>\n<h4 id=\"三种架构\"><a href=\"#三种架构\" class=\"headerlink\" title=\"三种架构\"></a>三种架构</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>个人理解，正确性不能保证。 <a href=\"https://zhuanlan.zhihu.com/p/324609981\">参考文章</a></p></blockquote>\n<ol>\n<li><em>基于Server-to-server瘦客户端/服务器架构讨论的这三种分布式架构</em></li>\n<li>server-搜索引擎 -查询、优化、提取；并发控制；事务提交；<br> engine-事务部分（针对于恢复，因为需要日志，有状态）、<strong>索引、日志</strong>、故障恢复、物理存储的部分</li>\n<li>三种架构的定义</li>\n<li>各部分的可拓展性与兼容性特点</li>\n</ol>\n<p>三种架构本质是newSQL想兼有SQL的强一致性、事务支持与NoSQL的易拓展性的不同实现方式，但又陷入<strong>可拓展性与兼容性</strong>的拔河比赛中。</p>\n<p><img src=\"https://pic2.zhimg.com/80/v2-da6f2e2d31e5022d1d3c670e854278a5_720w.webp\" alt=\"层级结构\"><br>从上到下，依次是Partition ALL(分库分表)，Partition Enginee(share nothing)，Partition Storage（存算分离）；从上到下可拓展性降低，换来生态兼容性的增加。<br>分库分表可拓展性极佳，性能高；但业务耦合大，通常需要根据业务场景设计，需要用户自己处理分片策略、分布式事务、分布式Query，通用性差。每个节点都是完整的DBMS。<br>Share Nothing只在引擎层做分片，节点间相对独立。相对于传统的分库分表，<strong>将分布式事务与分布式查询等问题放到了数据库内部处理</strong>，向用户屏蔽了分布式事务等细节，提供<strong>统一的数据库服务</strong>，简化了用户使用。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>尴尬的是，大多数分库分表的实现也会通过中间件（数据处理、数据管理、负载均衡、驱动数据库） 的引入来屏蔽分布式事务等实现细节，同样采用类Multi Paxos这样的一致性协议来保证副本一致，同样对用户提供统一的数据库访问，那么相较而言，Partition Engine的策略优势好像又没有很大。</p></blockquote>\n<p>继续将分片的分界线下移，到事务及索引系统的下层。这个时候由于Part 1部分保留了完整的<strong>事务系统</strong>，已经不是无状态的，通常会保留单独的节点来处理服务。这样Part 1主要保留了<strong>计算</strong>相关逻辑，而Part 2负责了<strong>存储</strong>相关的像REDO，刷脏以及故障恢复。因此这种结构也就是我们常说的计算存储分离架构，也被称为Share Storage架构。<br>由于保持了完整的计算层，所以相对于传统数据库需要用户感知的变化非常少，能够做到更大程度的生态兼容。同时也因为只有存储层做了分片和打散，可扩展性不如上面提到的两种方案。</p>\n<h3 id=\"DDBS的组件结构\"><a href=\"#DDBS的组件结构\" class=\"headerlink\" title=\"DDBS的组件结构\"></a>DDBS的组件结构</h3><p><img src=\"https://cdn.jsdelivr.net/gh/CenterWander/tuchuang/img/20230214143507.png\" alt=\"image.png\"></p>\n<p>– 应用处理器（AP）功能：<br>用户接口：检查用户身份，接受用户命令（如SQL）<br>语义数据控制器：一些约束（视图管理、安全控制、语义完整性控制）<br>全局查询处理器：将用户命令翻译成数据库命令；生成全局查询计划；收集局部查询结果并返回给用户<br>全局执行监控器（全局事务管理器）：调度和监视AP和DP；保证复制数据的一致性；保证全局事务的原子性<br>– 数据处理器（DP）功能：<br>局部查询处理器：全局命令 —&gt; 局部命令；选择最好的访问路径去执行<br>局部事务管理器：以局部子事务为单位进行调度执行<br>局部调度管理器：负责局部场地上的并发控制<br>局部恢复管理器：维护本地数据库一致性的故障恢复<br>存储管理器：访问数据库；控制数据库缓存管理器；返回局部执行结果</p>\n<h3 id=\"DDBS的模式结构\"><a href=\"#DDBS的模式结构\" class=\"headerlink\" title=\"DDBS的模式结构\"></a>DDBS的模式结构</h3><p><img src=\"https://cdn.jsdelivr.net/gh/CenterWander/tuchuang/img/20230214143753.png\" alt=\"image.png\"></p>\n<ul>\n<li>全局外模式(GES): 全局外模式即全局<strong>用户视图</strong>，是分布式数据库的全局用户对分布式数据库的最高层抽象。</li>\n<li>全局概念模式(GCS): 全局概念模式即全局概念视图，是分布式数据库的整体抽象，包含了全部数据特性和<strong>逻辑结构</strong>。全局概念模式再经过分片模式和分配模式映射到局部概念模式。</li>\n<li>分片模式是描述全局数据的<strong>逻辑划分</strong>视图。即全局数据逻辑结构根据某种条件的划分，将全局数据逻辑结构划分为局部数据逻辑结构。每一个逻辑划分成一个分片。在关系数据库中，一个关系中的一个子关系称该关系的一个片段。</li>\n<li>分配模式是描述局部数据逻辑的局部物理结构，即划分后的分片的<strong>物理分配</strong>视图。</li>\n<li>局部概念模式(LCS) ：局部概念模式为局部概念视图，是全局概念模式的子集。局部概念模式用于描述局部场地上的局部数据<strong>逻辑结构</strong>。当全局数据模型与局部数据模型不同时，还涉及数据模型转换等内容。</li>\n<li>局部内模式(LIS) ：定义局部<strong>物理视图</strong>，是对物理数据库的描述，类似集中数据库的内层。</li>\n</ul>\n<h3 id=\"DDBS的数据透明性\"><a href=\"#DDBS的数据透明性\" class=\"headerlink\" title=\"DDBS的数据透明性\"></a>DDBS的数据透明性</h3><ul>\n<li><strong>分片透明性</strong>：分片是将一个关系分成几个子关系，每个子关系称为一个分片。用户不必考虑<u>数据属于哪个分片</u>的性质称为分片透明性。位于全局概念模式和分片模式之间。</li>\n<li><strong>分配透明性</strong>：分布数据库支持<strong>有控制的数据冗余</strong>，即数据可重复存储在不同的场地上。用户不必考虑各个片段的<u>存储场地</u>称为分配透明性。位于分片模式和分配模式之间。</li>\n<li><strong>局部映射透明性</strong>：用户不必考虑数据的<u>局部存储形式</u>称为局部映射透明性。位于分配模式与局部概念模式之间。</li>\n</ul>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">txt</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">select . from S --分片透明性</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">select . from S1 &amp; S2 --分配透明性</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">select . from S1 at site1 --局部映射透明性</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">Execute:$SUPIMS($SNO,$FOUND,$SNAME) at L1 --不透明</span></span></code></pre></div><h3 id=\"MDBS-V-S-DDBS-4点\"><a href=\"#MDBS-V-S-DDBS-4点\" class=\"headerlink\" title=\"MDBS V.S. DDBS 4点\"></a>MDBS V.S. DDBS 4点</h3><p><strong>分布式数据库系统</strong>：是自上而下(top-down) 地设计数据库，可灵活地进行分片和分配设计。但分布式数据库系统具有数据库组件数量的限制，通常不多于数十个数据库组件。<br><strong>多数据库集成系统</strong>：数据和数据库已存在，是遵循自下而上(bottom-up) 地集成各局部场地上的数据。数据集成系统通过约束数据管理能力(只支持读) ，可将数据库组件数量扩展到数百个。<br>二者都需要为用户提供统一的存取数据环境，数据都分散存储，区别在于：</p>\n<ul>\n<li>数据模式是否预先定义</li>\n<li>DBMS是否同构</li>\n<li>查询优化策略是否自动生成</li>\n<li>是否一定存在局部用户（MDBS是）</li>\n</ul>\n<h1 id=\"第三章\"><a href=\"#第三章\" class=\"headerlink\" title=\"第三章\"></a>第三章</h1><h2 id=\"3-1-分布式数据库设计（分片，分配，复制）\"><a href=\"#3-1-分布式数据库设计（分片，分配，复制）\" class=\"headerlink\" title=\"3.1 分布式数据库设计（分片，分配，复制）\"></a>3.1 分布式数据库设计（分片，分配，复制）</h2><h3 id=\"3-1-1-设计的策略与步骤\"><a href=\"#3-1-1-设计的策略与步骤\" class=\"headerlink\" title=\"3.1.1 设计的策略与步骤\"></a>3.1.1 设计的策略与步骤</h3><p>自顶向下，需求分析-&gt;概念设计-&gt;分布设计-&gt;物理设计-&gt;性能调优</p>\n<h3 id=\"3-1-2-分片的定义及作用\"><a href=\"#3-1-2-分片的定义及作用\" class=\"headerlink\" title=\"3.1.2 分片的定义及作用\"></a>3.1.2 分片的定义及作用</h3><p>分片（Fragmentation)：对全局数据的逻辑划分。<br><strong>分配（Allocation）</strong>：对片段的存储场地的指定，称为分配。当片段存储在一个以上场地时，称为数据复制（Replication）。如果每个片段只存储在一个场地，称为数据分割（Partition）存储。</p>\n<p>分片的作用：</p>\n<ul>\n<li>减少网络传输数据量</li>\n<li>增大事务处理的局部性</li>\n<li>提高数据的查询效率和系统可靠性</li>\n<li>使负载均衡<br>分片过程是将全局数据进行逻辑划分和实际物理分配的过程。全局数据由分片模式定义成各个片段数据，各个片段数据由分配模式定义存储在各个场地。</li>\n</ul>\n<p><u>分片的原则：<strong>完备性</strong>（数据不丢）、<strong>可重构性</strong>（关系不丢）、<strong>不相交性</strong></u>（形式化描述）</p>\n<p>分片的种类：水平分片（按元组）、垂直分片（按属性）、混合分片</p>\n<h3 id=\"3-1-3-水平分片\"><a href=\"#3-1-3-水平分片\" class=\"headerlink\" title=\"3.1.3 水平分片\"></a>3.1.3 水平分片</h3><p>水平分片：选择</p>\n<p>导出式：半联接</p>\n<p>设计依据分片的需求信息，来源于应用因素和数据库因素</p>\n<p>设计准则：定义具有完备性和最小性的一组简单谓词集</p>\n<h3 id=\"3-1-4-垂直分片\"><a href=\"#3-1-4-垂直分片\" class=\"headerlink\" title=\"3.1.4 垂直分片\"></a>3.1.4 垂直分片</h3><p>分片表示：投影运算</p>\n<p>完备性证明：并运算（属性）</p>\n<p>可重构性证明：连接运算</p>\n<p>不相交性证明：交运算，结果不是空，是主关键字</p>\n<h3 id=\"3-1-5-分片的表示方法\"><a href=\"#3-1-5-分片的表示方法\" class=\"headerlink\" title=\"3.1.5 分片的表示方法\"></a>3.1.5 分片的表示方法</h3><p>图形表示法（表格）和树形表示法</p>\n<p><img src=\"https://raw.githubusercontent.com/CenterWander/tuchuang/main/img/202311022153.png\" alt=\"图片\"></p>\n<p><img src=\"https://raw.githubusercontent.com/CenterWander/tuchuang/main/img/202311022152.png\" alt=\"202311022152\"></p>\n<h3 id=\"3-1-6-分配设计\"><a href=\"#3-1-6-分配设计\" class=\"headerlink\" title=\"3.1.6 分配设计\"></a>3.1.6 分配设计</h3><p>片段到物理场地存储映射的过程称为分配设计的过程。</p>\n<ul>\n<li>非复制分配<br>如果每个片段只存储在一个场地上，称为<strong>分割式分布</strong>，对 应的分布库，称为<strong>全分割式分布库</strong>。 </li>\n<li>复制分配<br>如果每个片段在每个场地上存有副本，称为<strong>全复制分配</strong>，对应的分布库称为<strong>全复制分布库</strong>。<br>如果每个片段只在部分场地上存有副本，称为<strong>部分复制分配</strong>，对应的分布库称为<strong>部分复制分布库</strong>。</li>\n</ul>\n<h3 id=\"3-1-7-数据复制技术\"><a href=\"#3-1-7-数据复制技术\" class=\"headerlink\" title=\"3.1.7 数据复制技术\"></a>3.1.7 数据复制技术</h3><p>同步复制与异步复制；主从复制与对等复制；</p>\n<h2 id=\"3-2-分布式查询优化\"><a href=\"#3-2-分布式查询优化\" class=\"headerlink\" title=\"3.2 分布式查询优化\"></a>3.2 分布式查询优化</h2><p><font color=\"#2DC26B\">(体现关键步骤，分片展开等，∪是二元运算，圈空)</font></p>\n<h3 id=\"3-2-1-查询优化的意义\"><a href=\"#3-2-1-查询优化的意义\" class=\"headerlink\" title=\"3.2.1 查询优化的意义\"></a>3.2.1 查询优化的意义</h3><h3 id=\"3-2-2-查询处理器\"><a href=\"#3-2-2-查询处理器\" class=\"headerlink\" title=\"3.2.2 查询处理器\"></a>3.2.2 查询处理器</h3><h3 id=\"3-2-3-查询分解\"><a href=\"#3-2-3-查询分解\" class=\"headerlink\" title=\"3.2.3 查询分解\"></a>3.2.3 查询分解</h3><p>基于全局概念模式将演算查询分解为代数查询。得到全局逻辑查询计划树。以下五步：</p>\n<ol>\n<li>查询规范化（交换律结合律分配律）</li>\n<li>语法及语义分析（语法错误、无意义的查询、无权限，通过查询图）</li>\n<li>查询约简</li>\n<li>查询重写</li>\n</ol>\n<h3 id=\"3-2-4-数据局部化\"><a href=\"#3-2-4-数据局部化\" class=\"headerlink\" title=\"3.2.4 数据局部化\"></a>3.2.4 数据局部化</h3><p>将全局表利用并运算和连接运算分解为局部表<br>先画出全局树，优化全局树，转换为片段查询树，<br>及时将选择运算、联接运算置空，<strong>并将∞下移到∪之前执行</strong>（利用分配律）</p>\n<h3 id=\"3-2-5-片段查询的优化\"><a href=\"#3-2-5-片段查询的优化\" class=\"headerlink\" title=\"3.2.5 片段查询的优化\"></a>3.2.5 片段查询的优化</h3><h2 id=\"3-3-分布式存取优化\"><a href=\"#3-3-分布式存取优化\" class=\"headerlink\" title=\"3.3 分布式存取优化\"></a>3.3 分布式存取优化</h2><h3 id=\"3-3-1-基本概念\"><a href=\"#3-3-1-基本概念\" class=\"headerlink\" title=\"3.3.1 基本概念\"></a>3.3.1 基本概念</h3><h3 id=\"3-3-2-优化的理论基础\"><a href=\"#3-3-2-优化的理论基础\" class=\"headerlink\" title=\"3.3.2 优化的理论基础\"></a>3.3.2 优化的理论基础</h3><p><strong>关系的基：</strong> <strong>指关系R包含的元组个数，记为Card(R)</strong><br>• <strong>属性的长度</strong>：指属性A定义的取值字节数，记为Length(A)<br>• <strong>元组的长度</strong>：关系R中每个元组的字节数，记为Length(R),<br><strong>Length(R)=<strong>∑Length(Ai)<br>• <strong>关系的大小</strong>：关系</strong>R</strong>所包含的字节数，记为Size(R)<br><strong>Size(R)</strong>=<strong>Card(R) Length(R)</strong><br>• <strong>属性的特征值</strong>：指关系R中属性A取值不同的属性值个数，<br><strong>记为Val(A)</strong><br>• <strong>属性A的最大值和最小值</strong>：记为Max(A)和Min(A)</p>\n<p><strong>选择运算：</strong><br>基数：<em><em>Card（S）=ρ</em> Card（R）</em>*<br><strong>ρ</strong>的计算：仅考虑选择属性A条件的等值情况**，其中A是R的属性，X是常数。 则<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.238ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.839ex\" height=\"3.195ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -864.9 5232.8 1412\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D70C\" d=\"M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(794.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(1850.6,0)\"><g data-mml-node=\"mn\" transform=\"translate(1514.4,394) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mrow\" transform=\"translate(220,-370.3) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D449\" d=\"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(769,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1298,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1596,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1985,0)\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2744,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3022,0)\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3772,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g><rect width=\"3142.3\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></svg></mjx-container></p>\n<p><strong>Val(S,B)的计算</strong>：<br>当属性B属于选择条件时，Val(S,B)=1<br>当属性B为关键字（主键）时，Val(S,B)=<strong>ρ Val(R,B)</strong><br>当属性B不属于选择谓词时，<br><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.469ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"108.099ex\" height=\"4.07ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -1149.5 47779.7 1799\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D449\" d=\"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(769,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1298,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1596,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1985,0)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2630,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3074.7,0)\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3833.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4500.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mrow\" transform=\"translate(5556.2,0)\"><g data-mml-node=\"mo\" transform=\"translate(0 -0.5)\"><path data-c=\"7B\" d=\"M547 -643L541 -649H528Q515 -649 503 -645Q324 -582 293 -466Q289 -449 289 -428T287 -200L286 42L284 53Q274 98 248 135T196 190T146 222L121 235Q119 239 119 250Q119 262 121 266T133 273Q262 336 284 449L286 460L287 701Q287 737 287 794Q288 949 292 963Q293 966 293 967Q325 1080 508 1148Q516 1150 527 1150H541L547 1144V1130Q547 1117 546 1115T536 1109Q480 1086 437 1046T381 950L379 940L378 699Q378 657 378 594Q377 452 374 438Q373 437 373 436Q350 348 243 282Q192 257 186 254L176 251L188 245Q211 236 234 223T287 189T340 135T373 65Q373 64 374 63Q377 49 378 -93Q378 -156 378 -198L379 -438L381 -449Q393 -504 436 -544T536 -608Q544 -611 545 -613T547 -629V-643Z\"></path></g><g data-mml-node=\"mtable\" transform=\"translate(667,0)\"><g data-mml-node=\"mtr\" transform=\"translate(0,-93.3)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mi\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(760,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1289,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1740,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2260,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2649,0)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3294,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3683,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(3961,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mi\" transform=\"translate(5127.7,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5472.7,0)\"><path data-c=\"1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(6022.7,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mi\" transform=\"translate(7022.7,0)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7782.7,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8311.7,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8762.7,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9282.7,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(9671.7,0)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(10316.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(10983.4,0)\"><g data-mml-node=\"text\"><path data-c=\"3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"></path></g><g data-mml-node=\"text\" transform=\"translate(778,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g></g><g data-mml-node=\"mfrac\" transform=\"translate(12817.2,0)\"><g data-mml-node=\"mrow\" transform=\"translate(220,516.8) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D449\" d=\"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(769,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1298,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1596,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1985,0)\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2744,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3022,0)\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3781,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g><g data-mml-node=\"mn\" transform=\"translate(1517.5,-345) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><rect width=\"3148.6\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mtext\" transform=\"translate(16205.9,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(16455.9,0)\"><g data-mml-node=\"mrow\" transform=\"translate(220,516.8) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(760,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1289,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1740,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2260,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2649,0)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3294,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3683,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4461,0)\"><path data-c=\"1D449\" d=\"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5230,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5759,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6057,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6446,0)\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7205,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7483,0)\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8242,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g><g data-mml-node=\"mn\" transform=\"translate(3094.7,-345) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g><rect width=\"6303\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mtext\" transform=\"translate(22998.9,0)\"><path data-c=\"A0\" d=\"\"></path></g><g data-mml-node=\"mi\" transform=\"translate(23248.9,0)\"><path data-c=\"1D449\" d=\"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(24017.9,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(24546.9,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(24844.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(25233.9,0)\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(25992.9,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(26437.6,0)\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(27196.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(27585.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(27863.6,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mi\" transform=\"translate(29030.2,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(29375.2,0)\"><path data-c=\"1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(29925.2,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mi\" transform=\"translate(30925.2,0)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(31685.2,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(32214.2,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(32665.2,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(33185.2,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(33574.2,0)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(34219.2,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(34886,0)\"><g data-mml-node=\"text\"><path data-c=\"3E\" d=\"M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z\"></path></g><g data-mml-node=\"text\" transform=\"translate(778,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g></g><g data-mml-node=\"mn\" transform=\"translate(36719.8,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(37219.8,0)\"><path data-c=\"1D449\" d=\"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(37988.8,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(38517.8,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(38815.8,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(39204.8,0)\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(39963.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(40408.5,0)\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(41167.5,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(42223.5,0) translate(0 250)\"></g></g></g></g></svg></mjx-container></p>\n<p>联接运算：<br><img src=\"https://raw.githubusercontent.com/CenterWander/tuchuang/main/img/202311022154.png\" alt=\"图片\"></p>\n<p>半连接运算：<br><img src=\"https://raw.githubusercontent.com/CenterWander/tuchuang/main/img/202311022155.png\" alt=\"202311022155\"></p>\n<h3 id=\"3-3-3-半连接优化方法\"><a href=\"#3-3-3-半连接优化方法\" class=\"headerlink\" title=\"3.3.3 半连接优化方法\"></a>3.3.3 半连接优化方法</h3><p><img src=\"https://raw.githubusercontent.com/CenterWander/tuchuang/main/img/202311022156.png\" alt=\"202311022156\"><br>就是看绕这么一圈，半连接付出的代价有没有全连接多。</p>\n<div class=\"language-markdown\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">markdown</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">作业一 分片设计</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">存在一个商品购物系统，系统中包含两个全局关系：用户表USER(UID，UNAME，ADDRESS，HOBBY，CITY) 和订单表ORDER(UID，PID，PRICE) ，UID为用户编号，UNAME为用户姓名，CITY为所在城市。PID为商品编号，PRICE为订单总价，UID在USER表中是主键，在ORDER表中是外键。先要进行分布式数据库的建立，分片的规则是：</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">（1）关系USER按属性敏感程度垂直分片</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">U1包含非敏感属性：UID，UNAME，CITY</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">U2包含敏感属性：ADDRESS，HOBBY</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">（2）USER中的所有非敏感属性再根据CITY进行水平分片</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">U11：CITY IN { 北京，上海，广州，深圳}</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">U12：CITY NOT IN { 北京，上海，广州，深圳}</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">（3）关系ORDER按照和USER 的连接关系进行分片，得到O1和O2 。</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">作业二 查询优化</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">查询Q： “查询“徐州市”用户购买商品编号为“P1”的所有订单，获取订单中的用户编号、用户姓名、商品编号和订单总价” 。</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">（1）写出查询Q的关系代数表达式，并变换到片段查询</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">（2）对片段查询树进行优化</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">作业三 存取优化</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">如下图</span></span></code></pre></div><p><img src=\"https://cdn.jsdelivr.net/gh/CenterWander/tuchuang/img/20230214215543.png\" alt=\"image.png\"></p>\n<h1 id=\"第四章-HBase\"><a href=\"#第四章-HBase\" class=\"headerlink\" title=\"第四章 HBase\"></a>第四章 HBase</h1><h3 id=\"HDFS的问题\"><a href=\"#HDFS的问题\" class=\"headerlink\" title=\"HDFS的问题\"></a>HDFS的问题</h3><ol>\n<li>不支持对数据的随机改写</li>\n<li>HDFS没有数据包的概念</li>\n<li>HDFS无法针对行数统计、过滤扫描等常见的<strong>数据查询</strong>功能实现快捷操作，一般需要通过Mapreduce实现。</li>\n<li>（优势是大文件存储、多副本、自动分块）</li>\n</ol>\n<h3 id=\"HBase的特点\"><a href=\"#HBase的特点\" class=\"headerlink\" title=\"HBase的特点\"></a>HBase的特点</h3><ol>\n<li>底层采用<strong>HDFS</strong>存储，但文件结构和元数据由自身维护。</li>\n<li>采用面向<strong>列+键值</strong>对的存储模式</li>\n<li>可实现便捷的横向<strong>拓展</strong></li>\n<li>可以实现自动的<strong>数据分片</strong></li>\n<li>较为严格的<strong>读写一致性</strong>和自动故障转移</li>\n<li>对全文的检索与<strong>过滤</strong><br>优点在于擅长处理大量数据的写入、高性能、高可靠、可拓展；缺点是不支持表的关联查询分析等。</li>\n</ol>\n<h3 id=\"Region\"><a href=\"#Region\" class=\"headerlink\" title=\"Region\"></a>Region</h3><p>Region server是存放Region的容器；Region是表的数据的一部分，一个Region相当于关系数据库中表的一个分片。一个表可能存放于不同的Region中。<br>特点：</p>\n<ol>\n<li>Region不能跨服务器，一个Region Server会有一个或多个Region;</li>\n<li>数据量增大时，Region会发生分裂；</li>\n<li>处于负载均衡的需要，Region会发生迁移；</li>\n<li>Region所有的数据存取操作都是调用HDFS的客户端接口实现的。<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>同一个表不同行的数据可以存放在不同的服务器，同一个表相同行的数据也可以存放在不同的服务器。这句话如何理解？(<del>我不理解，我觉得后半句有问题。</del>)<br>一个服务器是Region的存储机构，但存储一个Region不代表存储一个表；每个Region都包含若干个Store，一个Store就是一个列族，是把列族作为对象存储的，不一定是一个表的，可能是不同表的分片。</p></blockquote>\n</li>\n</ol>\n<p>预写日志WAL:先写到WAL中（一个Regionserver就一个WAL），在加载到memStore中；<br>每个region内部都有多个store实例，每个store对应一个列族；每个store中有一个memStore实例，当memStore满了，HDFS就会生成一个新的HFile（用LSM树来存储，会在最终刷写之前进行快速排序，使随机写入的数据实现顺序存储，提高读取效率）；memStore可以看作在内存中的缓存，无论读写，都会先看memStore。<br><img src=\"https://raw.githubusercontent.com/CenterWander/tuchuang/main/img/20230215205507.png\" alt=\"image.png\"></p>\n<h3 id=\"增删改操作\"><a href=\"#增删改操作\" class=\"headerlink\" title=\"增删改操作\"></a>增删改操作</h3><ul>\n<li>HBase新增单元格，在HDFS上增加一条数据</li>\n<li>HBase修改单元格，在HDFS上增加一条数据，但版本号比之前的大</li>\n<li>HBase删除单元格，在HDFS上增加一条数据，但是这条数据没有value，类型为Delete，即墓碑标记(Tombstone)，在执行HFile的合并时，会真正删除这些记录。</li>\n</ul>\n<h3 id=\"读写流程\"><a href=\"#读写流程\" class=\"headerlink\" title=\"读写流程\"></a>读写流程</h3><p><a href=\"https://www.cnblogs.com/yfb918/p/10416906.html\">参考文章：HBase读写流程</a><br>Zookeeper(ROOT)-&gt;RegionServer(META)-&gt;Region-&gt;memStoore<br><img src=\"https://raw.githubusercontent.com/CenterWander/tuchuang/main/img/20230217160625.png\" alt=\"image.png\"></p>\n<ol>\n<li><p>客户端访问，zookeeper的/hbase/meta-region-server节点查询到哪台RegionServer上有hbase：meta表</p>\n</li>\n<li><p>客户端连接含有hbase: meta表的regionserver。Hbase: meta表<strong>存储了所有的Regin的行键范围信息</strong>，通过这个表可以查询到请求行键所在的Region，以及这个Region所在的RegionServer</p>\n</li>\n<li><p>客户端在对应的RegionServer上，先从MemStore，再到HFile中找需要的信息。</p>\n</li>\n<li><p>第一次访问后，客户端会把meta信息缓存起来(BlockCache) ，下次操作直接从BlockCache中查找meta信息。<br><img src=\"https://raw.githubusercontent.com/CenterWander/tuchuang/main/img/20230217160645.png\" alt=\"image.png\"></p>\n</li>\n<li><p>客户端访问，zookeeper的/hbase/meta-region-server节点查询到哪台RegionServer上有hbase：meta表</p>\n</li>\n<li><p>客户端连接含有hbase: meta表的regionserver。Hbase: meta表存储了所有的Regin的行键范围信息，通过这个表可以查询到请求行键所在的Region，以及这个Region所在的RegionServer</p>\n</li>\n<li><p>客户端在对应的RegionServer上，把数据分别写到Hlog和memstore各一份</p>\n</li>\n<li><p>当memstore达到阈值后把数据刷成一个HFIle文件，当compact后，逐渐形成越来越大的HFIle后触发spilt，把当前的HFIle分成两个，这里相当于把一个大的region分割成两个region</p>\n</li>\n<li><p>若MemStore中的数据有丢失，则可以从HLog上恢复，当多个HFIle文件达到一定的大小后，会触发Compact合并操作，合并为一个HFIle，这里同时进行版本的合并和数据删除</p>\n</li>\n</ol>\n<h3 id=\"Rowkey设计\"><a href=\"#Rowkey设计\" class=\"headerlink\" title=\"Rowkey设计\"></a>Rowkey设计</h3><ul>\n<li>三原则：长度原则（越短越好），散列原则（数据均衡分布），唯一原则</li>\n<li>加盐salting，在rowkey前分配随机数；随机前缀可以让他们分不到不同的Region中。</li>\n<li>预分区，解决Region自动拆分带来的热点问题和拆分合并问题（也可预留拓展）；比如生成0-499的随机数，规定0-50，50-100…等Region的范围。</li>\n<li>散列，解决如同一用户同一天数据集中存放的需求；将某一参数(如uid，date)传入哈希，结果模500，余数加到首部，可再结合预分区，就能在满足需求的同时让数据均匀分布到Regionserver中。</li>\n<li>反转，牺牲rowkey的有序性换随机性；解决开头固定结尾变化的热点问题，如手机号；用于时间(Long.MAX_VALUE - timestamp)可满足最近记录优先的需求。</li>\n</ul>\n<h1 id=\"第五章-大数据索引结构\"><a href=\"#第五章-大数据索引结构\" class=\"headerlink\" title=\"第五章 大数据索引结构\"></a>第五章 大数据索引结构</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>三种基本的数据存储引擎分别是哈希（高效随机查找）、B树（高效范围查找）、LSM树(Log-Structured Merge Tree)。HBase的一个列族就是一颗LSM树，内存部分是跳表，外村选择了布隆过滤器来快速判别。</p></blockquote>\n<h2 id=\"跳表\"><a href=\"#跳表\" class=\"headerlink\" title=\"跳表\"></a>跳表</h2><p>跳跃表(Skip List)是一种能高效实现插入、删除、查找的内存数据结构，这些操作的复杂度都是<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.346ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 3689 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(763,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1152,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1450,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1935,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2412,0)\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3300,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container>。<br><strong>应对场景</strong>：快速写入，需要更新代价低，支持区间查询；与B+树的不同就在于更新代价低，因而适用于大数据场景。<br>跳跃表的构建：<br>•1、给定一个有序的链表。<br>•2、选择链表中最大和最小的元素，然后从其他元素中按照一定算法(随机) 随即选出一些元素，将这些元素组成有序链表。这个新的链表称为一层，原链表称为其下一层。<br>•3、为刚选出的每个元素添加一个指针域，这个指针指向下一层中值同自己相等的元素。Top指针指向该层首元素<br>•4、重复2、3步，直到不再能选择出除最大最小元素以外的元素。<br><strong>跳跃表的插入流程：</strong><br>插入跳表时，新入节点要以一定概率在上层生成索引。<br>找到待插入元素的前驱节点-&gt;插入-&gt;随机生成高度值-&gt;按高度值修改索引</p>\n<h2 id=\"LSM树\"><a href=\"#LSM树\" class=\"headerlink\" title=\"LSM树\"></a>LSM树</h2><p><strong>为什么说LSM树是一种写入友好的数据结构？</strong><br>LSM树对写入更友好，写入操作都是顺序写，利用了HDFS的优点。</p>\n<ol>\n<li><p>顺序写入：LSM树的写入操作是以顺序写的方式进行的。这是因为新数据被追加到磁盘上的顺序日志（SSTables）中，而不是直接写入到原始数据文件中。相比于传统的随机写入操作，顺序写入的开销更小，能够极大地提高写入性能。</p>\n</li>\n<li><p>延迟合并：LSM树的合并操作通常是延迟执行的，也就是说，多个SSTables之间的合并并不是在每次写入操作之后立即执行的。这样可以避免在写入过程中频繁地进行合并操作，从而减少了写入的延迟和开销。</p>\n</li>\n<li><p>内存缓存：LSM树通常会在内存中维护一个数据缓存区，用于存储最近写入的数据。即使在刷写flush到硬盘，内存中也会开辟新的memstore来为新的写入服务。这样可以避免每次写入都要访问磁盘，提高了写入性能。同时，内存缓存中的数据也可以通过定期刷新到磁盘上的SSTables中，以保证数据的持久性。<br><strong>应对场景</strong>：高吞吐量（顺序）写入，随机查找，可拓展性(LSM树允许数据分区）。<br><strong>compaction</strong>：将key值相同的数据全局综合圈起来，选择合适的版本交给用户。<br>主要有两种类型：<br>major compact：不宜频繁使用<br>优点：合并之后只有一个文件，读取性能最高<br>缺点：合并所有的文件需要很长的时间，消耗大量带宽。<br>minor compact：<br>优点：局部的compact操作，少了IO，减少文件个数，提升读取性能。<br>缺点：全局操作，无法在合并过程中完成。</p>\n</li>\n</ol>\n<h2 id=\"布隆过滤器\"><a href=\"#布隆过滤器\" class=\"headerlink\" title=\"布隆过滤器\"></a>布隆过滤器</h2><p>解决问题的类型：有效排除一些肯定不在数据库中的数据；<br><strong>实现原理</strong>：通过一个数组和多个哈希函数实现，对与每一个数据，做k次哈希，每次哈希结果对应数组位置置为1；如果查询一个数据，发现所有哈希结果指示的位置都为1，则该数据可能在数据库中，否则一定不在数据库中。</p>\n<p><strong>为什么说HBase是一种“顺序写入，随机查找”的分布式数据库？</strong><br>随机查找：尽管HBase采用了LSM树的索引结构，但HBase的查询操作并不是基于LSM树进行的，而是基于HBase表中的行键（row key）进行的。Region组织的元信息。</p>\n<h1 id=\"第六章-一致性\"><a href=\"#第六章-一致性\" class=\"headerlink\" title=\"第六章 一致性\"></a>第六章 一致性</h1><h2 id=\"分布式事务\"><a href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h2><p>事务是数据库中的一段操作序列，要么全做，要么不做；由三部分组成：开始标识，操作，结束标识（commit or abort）；按照组成结构可以分为平面事务（事务自治、独立）与<strong>嵌套事务</strong>（一个事务的执行包括另一个事务，内子外父）；</p>\n<h3 id=\"嵌套事务的特点\"><a href=\"#嵌套事务的特点\" class=\"headerlink\" title=\"嵌套事务的特点\"></a>嵌套事务的特点</h3><ul>\n<li><strong>提交依赖性</strong>：子事务的提交必须等待父事务的提交；</li>\n<li><strong>废弃依赖性</strong>：父事务废弃，子事务必须废弃；</li>\n</ul>\n<h3 id=\"分布式事务的一致性\"><a href=\"#分布式事务的一致性\" class=\"headerlink\" title=\"分布式事务的一致性\"></a>分布式事务的一致性</h3><p>这个问题是由于分布式数据库中存在数据复制造成的(也带来了可靠可用性）；<br><strong>三种级别：</strong></p>\n<ul>\n<li>强一致性：更新过即刻访问</li>\n<li>最终一致性：一段时间后可访问</li>\n<li>弱一致性：不可访问（网购评论、广告）</li>\n</ul>\n<h3 id=\"CAP\"><a href=\"#CAP\" class=\"headerlink\" title=\"CAP\"></a>CAP</h3><p>一个分布式系统不可能同时满足一致性、可用性与分区容错性，最多俩；</p>\n<ul>\n<li>一致性是数据在多个副本之间保持一致的特性；</li>\n<li>可用性是提供的服务一直处于可用的状态——在<strong>有限时间</strong>内<strong>返回结果</strong>；</li>\n<li>分区容错性，在遇到网络分区时，仍然保证可用性和一致性的服务；<br>例如，同时写北京和广州的DB都成功才返回成功且网络故障时提供降级服务（不可访问），满足CP。</li>\n</ul>\n<h3 id=\"BASE\"><a href=\"#BASE\" class=\"headerlink\" title=\"BASE\"></a>BASE</h3><p>Bascially Available, Soft State, Eventually consistent; 是对CAP中可用性和一致性权衡的结果；<br>出现故障时允许损失部分可用性；软状态指允许数据存在不一致的中间状态，认为不影响可用性；所有数据副本在经过一段时间后，最终都能达到一致的状态；<br>总的来说，BASE理论面向的是大型高可用可扩展的分布式系统，和传统的事物ACID特性是相反的，它完全不同于ACID的强一致性模型，而是<em>通过牺牲强一致性来获得可用性，并允许数据在一段时间内是不一致的，但最终达到一致状态。</em></p>\n<h2 id=\"HBase的ACID特性-了解\"><a href=\"#HBase的ACID特性-了解\" class=\"headerlink\" title=\"HBase的ACID特性(了解)\"></a>HBase的ACID特性(了解)</h2><p>原子性：只保证WAL的原子性；<br>一致性：强一致性；</p>\n<h2 id=\"2PC（重点）\"><a href=\"#2PC（重点）\" class=\"headerlink\" title=\"2PC（重点）\"></a>2PC（重点）</h2><p>分布式数据库中的全局事务由被分解为在各个场地上执行的子<br>事务所组成。只有当各个场地上的子事务都正确执行后，全局<br>事务才可以提交。只要有一个子事务不能提交，则全局事务应<br>该废弃，接下来所有的子事务也应全部废弃。因此，所有子事<br>务均可以正确提交是分布式事务提交的前提。<br><strong>执行流程</strong><br><strong>决定阶段</strong>：有协调者发送预提交(prepare) 命令，然后等待参与者的应答。如果所有的参与者都返回“准备提交(ready) ”。那么协调者做出提交决定；如果至少有一个参与者返回“准备废弃”，那么协调者做出废弃决定。<br><strong>执行阶段</strong>：协调者把在决定阶段做出的决定发送给参与者。如果协调者向各个参与者发“提交”(Commit) 命令，各个参与者执行提交；如果协调者向各个参与者发出“废弃”(Abort) 命令，各个参与者执行废弃，取消对数据库的修改。无论是“提交”还是“废弃”，各参与者执行完毕后都要向协调者返回“确认”(Ack) 应答，通知协调者执行结束。<br><img src=\"https://raw.githubusercontent.com/CenterWander/tuchuang/main/img/20230216104721.png\" alt=\"image.png\"><br><strong>存在的问题</strong><br>同步阻塞,单点问题,数据不一致,过于保守<br>协调者故障，参与者占着资源却不能执行事务，进入阻塞状态；可用三段提交协议避免，若已经阻塞，则使用<strong>终结协议</strong>恢复。<br>步骤1：选择参与者PT作为新的协调者。<br>步骤2： PT向所有参与者发送“访问状态”命令，各参与者返回自身的状态。<br>步骤3： PT 根据各参与者当前的状态做出决定：</p>\n<ol>\n<li>若部分参与者处于“初始”状态，部分参与者处于“准备就绪” 状态，则PT 发送abort命令；</li>\n<li>若所有参与者均处于“准备就绪”状态，则PT 发送Commit命令；</li>\n<li>若至少一个参与者处于 “提交”状态，则PT发送Commit命令；</li>\n<li>若至少一个参与者处于“废弃”状态，则PT发送abort命令；</li>\n</ol>\n<h2 id=\"Paxos\"><a href=\"#Paxos\" class=\"headerlink\" title=\"Paxos\"></a>Paxos</h2><p>Prepare-&gt;Accept-&gt;Learn<br>Proposer,Accepter,Learner</p>\n<h1 id=\"第七章-并发控制\"><a href=\"#第七章-并发控制\" class=\"headerlink\" title=\"第七章 并发控制\"></a>第七章 并发控制</h1><h3 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h3><p>并发控制的主要目的是保证事务的隔离性，最终保证数据的一致性；解决并发带来的<strong>丢失修改、不可重复读、读脏数据</strong>的问题；并发控制就是利用正确的方式调度并发操作序列，<strong>避免数据不一致</strong>；保证一个事务的执行不受其他事务的干扰，保证事务并发执行的<strong>可串行性</strong>。 </p>\n<h3 id=\"可串行化\"><a href=\"#可串行化\" class=\"headerlink\" title=\"可串行化\"></a>可串行化</h3><p>如果一个事务最后一个操作在另一个事务之前，或反之，则是串行调度。<br>等价判别：冲突操作顺序一致<br><img src=\"https://raw.githubusercontent.com/CenterWander/tuchuang/main/img/20230216125522.png\" alt=\"image.png\"></p>\n<p>可串行化：等价于串行调度<br><strong>分布式事务的可串行化</strong>：<br>n个事务在m个场地上的并发序列记为E;<br>当每个场地的局部调度是可串行化的 <strong>并且</strong> 在总序中如果有<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.666ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.246ex\" height=\"2.197ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -677 3202.8 971.2\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(617,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(1188.7,0)\"><path data-c=\"3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(2244.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(617,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g></g></g></g></svg></mjx-container>，在每一个局部调度中也必须有这样的关系。</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">txt</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">设数据项a，b存放在S1场地，x，y存放在S2场地。有分布式事务T1和T2，判断下面的每个执行是否是局部可串行的，是否是全局可串行的，分别说明理由。</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">1、执行1：在S 1场地R 1(a) R 2(a) W 2(b) W 1(a) ，</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        在S 2场地R 1(x) W 1(x) R 2(y) W 2(x) ，</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">2、执行2：在S 1场地R 1(a) R 2(a) W 1(a) W 2(b) </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        在S 2场地W 2(x) R 1(x) R 2(y) W 1(x) 。</span></span></code></pre></div><h3 id=\"分布式并发控制\"><a href=\"#分布式并发控制\" class=\"headerlink\" title=\"分布式并发控制\"></a>分布式并发控制</h3><p>分布式数据库并发控制是指在分布式数据库系统中，为了保证数据的一致性和完整性，同时满足用户并发访问的需求，采用一定的技术手段对并发访问进行控制的过程。它主要解决的问题包括以下几个方面：</p>\n<ol>\n<li><p>数据一致性问题：在分布式环境下，由于数据可能分散在多个节点上，因此必须采取措施保证多个节点之间数据的一致性，避免数据冲突和不一致的问题。</p>\n</li>\n<li><p>并发控制问题：多个用户可能同时对同一份数据进行读写操作，因此需要采取并发控制策略，保证数据的正确性和完整性，同时最大化地发挥系统的并发处理能力。</p>\n</li>\n</ol>\n<h3 id=\"三种典型的分布式锁\"><a href=\"#三种典型的分布式锁\" class=\"headerlink\" title=\"三种典型的分布式锁\"></a>三种典型的分布式锁</h3><p>数据库(MySQL)方式：用一张表做锁，加锁是往里面用资源ID做主键插入记录，解锁则删除；<br>Redis分布式锁：setnx，setnx是<code>set if not exists</code>的缩写；若key不存在，则将key的值设置为value；当key存在时，不做任何操作。解锁<code>del key</code>；<br>Zookeeper分布式锁：创建一个目录用于锁管理，加锁在该目录下创建<strong>临时顺序节点</strong>，如果顺序号最小则获得锁，否则监听目录等待；解锁则删除节点；</p>\n<p>对比：</p>\n<ul>\n<li>从理解的难易程度角度（从低到高）数据库 &gt; 缓存 &gt;Zookeeper</li>\n<li>从性能角度（从高到低）缓存 &gt; Zookeeper &gt;= 数据库</li>\n<li>从可靠性角度（从高到低）Zookeeper &gt; 缓存 &gt; 数据库</li>\n</ul>\n","text":"第一章产生背景横向拓展，水平拓展；用更多的节点支持更大量的请求。纵向拓展，垂直拓展；扩展一个节点的能力支撑更大量的请求。大数据的特点：volume，veloci...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"大数据","slug":"大数据","count":11,"path":"api/categories/大数据.json"}],"tags":[{"name":"学习笔记","slug":"学习笔记","count":17,"path":"api/tags/学习笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E7%AB%A0\"><span class=\"toc-text\">第一章</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%A7%E7%94%9F%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">产生背景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%9C%80%E8%A6%81%E6%80%8E%E6%A0%B7%E7%9A%84%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">大数据需要怎样的存储</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8A%80%E6%9C%AF%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">技术分类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#NoSQL%E4%B8%8EnewSQL\"><span class=\"toc-text\">NoSQL与newSQL</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E7%AB%A0\"><span class=\"toc-text\">第二章</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8EC-S%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">基于C&#x2F;S的层次结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#AP%E4%B8%8EDP\"><span class=\"toc-text\">AP与DP</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#AP%E5%8A%9F%E8%83%BD%E7%9A%84%E5%8F%98%E5%8C%96\"><span class=\"toc-text\">AP功能的变化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E7%A7%8D%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">三种架构</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DDBS%E7%9A%84%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">DDBS的组件结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DDBS%E7%9A%84%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">DDBS的模式结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DDBS%E7%9A%84%E6%95%B0%E6%8D%AE%E9%80%8F%E6%98%8E%E6%80%A7\"><span class=\"toc-text\">DDBS的数据透明性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MDBS-V-S-DDBS-4%E7%82%B9\"><span class=\"toc-text\">MDBS V.S. DDBS 4点</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E7%AB%A0\"><span class=\"toc-text\">第三章</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%88%86%E7%89%87%EF%BC%8C%E5%88%86%E9%85%8D%EF%BC%8C%E5%A4%8D%E5%88%B6%EF%BC%89\"><span class=\"toc-text\">3.1 分布式数据库设计（分片，分配，复制）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-1-%E8%AE%BE%E8%AE%A1%E7%9A%84%E7%AD%96%E7%95%A5%E4%B8%8E%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">3.1.1 设计的策略与步骤</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-2-%E5%88%86%E7%89%87%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">3.1.2 分片的定义及作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-3-%E6%B0%B4%E5%B9%B3%E5%88%86%E7%89%87\"><span class=\"toc-text\">3.1.3 水平分片</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-4-%E5%9E%82%E7%9B%B4%E5%88%86%E7%89%87\"><span class=\"toc-text\">3.1.4 垂直分片</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-5-%E5%88%86%E7%89%87%E7%9A%84%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3.1.5 分片的表示方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-6-%E5%88%86%E9%85%8D%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">3.1.6 分配设计</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-7-%E6%95%B0%E6%8D%AE%E5%A4%8D%E5%88%B6%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">3.1.7 数据复制技术</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-%E5%88%86%E5%B8%83%E5%BC%8F%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">3.2 分布式查询优化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-1-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E7%9A%84%E6%84%8F%E4%B9%89\"><span class=\"toc-text\">3.2.1 查询优化的意义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-2-%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">3.2.2 查询处理器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-3-%E6%9F%A5%E8%AF%A2%E5%88%86%E8%A7%A3\"><span class=\"toc-text\">3.2.3 查询分解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-4-%E6%95%B0%E6%8D%AE%E5%B1%80%E9%83%A8%E5%8C%96\"><span class=\"toc-text\">3.2.4 数据局部化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-5-%E7%89%87%E6%AE%B5%E6%9F%A5%E8%AF%A2%E7%9A%84%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">3.2.5 片段查询的优化</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%8F%96%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">3.3 分布式存取优化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">3.3.1 基本概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-2-%E4%BC%98%E5%8C%96%E7%9A%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">3.3.2 优化的理论基础</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-3-%E5%8D%8A%E8%BF%9E%E6%8E%A5%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3.3.3 半连接优化方法</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%9B%9B%E7%AB%A0-HBase\"><span class=\"toc-text\">第四章 HBase</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HDFS%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">HDFS的问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HBase%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">HBase的特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Region\"><span class=\"toc-text\">Region</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A2%9E%E5%88%A0%E6%94%B9%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">增删改操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E5%86%99%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">读写流程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Rowkey%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">Rowkey设计</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">第五章 大数据索引结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B7%B3%E8%A1%A8\"><span class=\"toc-text\">跳表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#LSM%E6%A0%91\"><span class=\"toc-text\">LSM树</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8\"><span class=\"toc-text\">布隆过滤器</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%85%AD%E7%AB%A0-%E4%B8%80%E8%87%B4%E6%80%A7\"><span class=\"toc-text\">第六章 一致性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">分布式事务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B5%8C%E5%A5%97%E4%BA%8B%E5%8A%A1%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">嵌套事务的特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7\"><span class=\"toc-text\">分布式事务的一致性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CAP\"><span class=\"toc-text\">CAP</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BASE\"><span class=\"toc-text\">BASE</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HBase%E7%9A%84ACID%E7%89%B9%E6%80%A7-%E4%BA%86%E8%A7%A3\"><span class=\"toc-text\">HBase的ACID特性(了解)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2PC%EF%BC%88%E9%87%8D%E7%82%B9%EF%BC%89\"><span class=\"toc-text\">2PC（重点）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Paxos\"><span class=\"toc-text\">Paxos</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%83%E7%AB%A0-%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">第七章 并发控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E7%9A%84\"><span class=\"toc-text\">目的</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E4%B8%B2%E8%A1%8C%E5%8C%96\"><span class=\"toc-text\">可串行化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">分布式并发控制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E7%A7%8D%E5%85%B8%E5%9E%8B%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81\"><span class=\"toc-text\">三种典型的分布式锁</span></a></li></ol></li></ol></li></ol>","author":{"name":"以太工坊","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"分享我的课程学习笔记、经验与有趣的小玩意.图片等资源无法加载时请使用代理","socials":{"github":"https://github.com/Tim-Saijun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"telegram":{"icon":"/img/telegram.svg","link":"https://t.me/tim_run"},"Email":{"icon":"/img/mail.svg","link":"mailto:b@zair.top"},"RSS":{"icon":"/img/rss.svg","link":"/atom.xml"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"数据挖掘笔记","uid":"11049db348f99a08b5c18bbc7e510d06","slug":"数据挖掘复习笔记","date":"2023-02-20T08:00:00.000Z","updated":"2024-02-22T03:52:13.965Z","comments":true,"path":"api/articles/数据挖掘复习笔记.json","keywords":"计算机技术,大数据,人工智能","cover":[],"text":"第1章 认识数据挖掘数据挖掘的定义技术角度：利用计算机技术，从数据中自动分析并提取信息的处理过程；目的是发掘数据中潜在的有价值的信息；一般使用机器学习、统计学、...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"机器学习","slug":"机器学习","count":5,"path":"api/categories/机器学习.json"}],"tags":[{"name":"学习笔记","slug":"学习笔记","count":17,"path":"api/tags/学习笔记.json"}],"author":{"name":"以太工坊","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"分享我的课程学习笔记、经验与有趣的小玩意.图片等资源无法加载时请使用代理","socials":{"github":"https://github.com/Tim-Saijun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"telegram":{"icon":"/img/telegram.svg","link":"https://t.me/tim_run"},"Email":{"icon":"/img/mail.svg","link":"mailto:b@zair.top"},"RSS":{"icon":"/img/rss.svg","link":"/atom.xml"}}}}},"next_post":{"title":"数据挖掘复习课","uid":"4b679f8318026349163fd3a282ea69e7","slug":"数据挖掘复习课","date":"2023-02-15T13:38:55.000Z","updated":"2024-02-22T03:52:13.965Z","comments":true,"path":"api/articles/数据挖掘复习课.json","keywords":"计算机技术,大数据,人工智能","cover":null,"text":"第1章 认识数据挖掘1、数据挖掘的定义2、有指导学习和无指导学习3、数据挖掘的过程 第2章 基本数据挖掘技术1、决策树概念和C 4.5算法的一般过程2、决策树关...","link":"","photos":[],"count_time":{"symbolsCount":494,"symbolsTime":"1 mins."},"categories":[{"name":"机器学习","slug":"机器学习","count":5,"path":"api/categories/机器学习.json"}],"tags":[{"name":"学习笔记","slug":"学习笔记","count":17,"path":"api/tags/学习笔记.json"}],"author":{"name":"以太工坊","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"分享我的课程学习笔记、经验与有趣的小玩意.图片等资源无法加载时请使用代理","socials":{"github":"https://github.com/Tim-Saijun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"telegram":{"icon":"/img/telegram.svg","link":"https://t.me/tim_run"},"Email":{"icon":"/img/mail.svg","link":"mailto:b@zair.top"},"RSS":{"icon":"/img/rss.svg","link":"/atom.xml"}}}}}}