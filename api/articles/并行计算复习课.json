{"title":"并行计算复习课","uid":"339231bc7dd528f94b3eb2f74a68d4df","slug":"并行计算复习课","date":"2023-05-11T08:38:15.000Z","updated":"2024-02-22T03:52:13.965Z","comments":true,"path":"api/articles/并行计算复习课.json","keywords":"计算机技术,大数据,人工智能","cover":[],"content":"<h2 id=\"复习课\"><a href=\"#复习课\" class=\"headerlink\" title=\"复习课\"></a>复习课</h2><p>第一章 Amdal 定律 对定律的理解（任务不变的情况下，速度的提升、加速比）、加速的极限<br><strong>应用题</strong>  6’*5<br>网格和线程块的布局，计算全局id<br>并行、并发、线程束、全局id、CPU多核与GPU众核<br><strong>程序分析题</strong>  10*2<br>给代码写结果、分析为什么会有这种结果<br><strong>CPU多核</strong>  10*2<br>数据划分：明确每个部分处理的数据范围<br>任务并行：线程池实验<br><strong>CUDA编程</strong>    15*2<br>具体的问题，设计网格与线程块，或者给了线程块，只需要设计网格；<br>主函数中的固定流程；关键在写核函数；</p>\n<h2 id=\"并行计算\"><a href=\"#并行计算\" class=\"headerlink\" title=\"并行计算\"></a>并行计算</h2><h3 id=\"并发与并行\"><a href=\"#并发与并行\" class=\"headerlink\" title=\"并发与并行\"></a>并发与并行</h3><p>串行：单机单核，指令顺序执行。<br><strong>并发</strong>：单机单核，指令在时间上并行执行，同一时间间隔发生。<br><strong>并行</strong>：单机多核，多机单&#x2F;多核，指令在空间上并行，同一时刻发生。<br>并行计算就是在并行计算机或者分布式系统等高性能计算系统上做的超级计算。并行计算可以降低单个问题求解的时间，增加求解规模与精度，提高吞吐率等。</p>\n<p>三种分类：<br>计算模式：时间并行（流水线）、空间并行（多处理器）<br>程序逻辑：任务并行、数据并行<br>应用角度：计算密集、数据密集、网络密集</p>\n<h3 id=\"Flynn分类法\"><a href=\"#Flynn分类法\" class=\"headerlink\" title=\"Flynn分类法\"></a>Flynn分类法</h3><p>依据指令流(instruction stream)和数据流(data stream)的执行方式对并行计算机体系结构分类的一种方法。<br>包含SISD(早期串行机）,SIMD（单核计算机）,MISD（很少用）,MIMD（多核计算机，并行）;</p>\n<h3 id=\"Amdahl定律\"><a href=\"#Amdahl定律\" class=\"headerlink\" title=\"Amdahl定律\"></a>Amdahl定律</h3><p>假定任务数量一定，通过计算性能加速比，揭示了<u>一个程序中无法并行化的部分会限制整个程序的性能提升</u>的规律。<br>$$S&#x3D;\\frac{W_{s}+W_{p}}{W_{s}+W_{p}&#x2F;p}$$<br>其中$W_{s}$为串行任务数量，$W_{p}$为并行任务数量，$p$为处理器数目，$S$为加速比。<br>依据串行分量的占比$f&#x3D;W_{s}&#x2F;W$，将上式同时除以$W$可得下面的式子：<br>$$S&#x3D;\\frac{f+(1-f)}{f+\\frac{1-f}{p}} &#x3D;\\frac{p}{1+f(p-1)}$$<br>$\\lim_{x\\rightarrow \\infty}S&#x3D;1&#x2F;f$，当处理器的数目无限增大时，系统能达到的加速比受制于程序中的串行部分。</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">txt</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">1.一个串行应用程序中，有20%的比例必须串行执行，现在需要实现3倍的性能提升，为实现这个目标，需要多少个CPU？如果要实现5倍的加速比，需要多少个CPU？</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">2.一个运行在5个计算机上的并行程序，有10%的并行部分。相对于在一个计算机上的串行执行，加速比是多少？如果我们想将加速比提升2倍，需要多少个CPU？</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">3.将一个不可并行部分占5%的应用程序修改为并行程序。目前市场上有两种并行计算机：计算机X有4个CPU，每个CPU可以在1个小时内完成该应用程序的执行；计算机Y有16个CPU，每个CPU可以在2个小时内执行完该应用程序。如果需要最小化运行时间，请问你该买哪个计算机？</span></span></code></pre></div><h2 id=\"CUDA概述\"><a href=\"#CUDA概述\" class=\"headerlink\" title=\"CUDA概述\"></a>CUDA概述</h2><h3 id=\"异构计算\"><a href=\"#异构计算\" class=\"headerlink\" title=\"异构计算\"></a>异构计算</h3><p>GPU的并行计算是一种异构计算，分为主机端（CPU）和设备端（GPU），二者关系从来都不是平等的，CUDA甚至需要明确标识代码需要在哪运行。</p>\n<h3 id=\"CPU和GPU的差异\"><a href=\"#CPU和GPU的差异\" class=\"headerlink\" title=\"CPU和GPU的差异\"></a>CPU和GPU的差异</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>直观来说，CPU更多资源用于缓存与控制流，GPU则是更多的数据计算。</p></blockquote>\n<ol>\n<li>在GPU环境下，GPU的核心负责所有计算任务的执行，<strong>但工作指令总是来自CPU</strong>。</li>\n<li>在GPU情况下，<strong>GPU核心从不自己获取数据，数据总是来自CPU端，计算结果再传回CPU端</strong>。因此，GPU在后台只是扮演计算加速器的角色，为CPU完成某些外包任务。</li>\n<li>这种类型的体系架构只有在有着<strong>大量的并行处理单元</strong>，而不是仅有2个或4个时，才会非常有效。</li>\n<li>线程束的概念对GPU的体系结构有重大影响。数据必须以同样大小的数据块为单位输入GPU，<strong>数据块是半个线程束</strong>，即16个元素。</li>\n<li>数据必须以半个线程束的大小传输给GPU核心的事实意味着负责将数据传入GPU的存储系统应该每次输入16个数据。这需要一次能够传输16个数的并行存储子系统。这就是为什么GPU的DRAM存储器是由DDR5构成的，因为<strong>它是并行存储器</strong>。</li>\n<li>由于GPU核心和CPU核心是完全不同的处理单元，因此可以预见它们<strong>具有不同的ISA</strong>（指令集架构）。即：它们说的是不同的语言。<br>GPU线程与CPU线程也有所不同，创建开销极低。CPU通过多级cache缩减延迟，而GPU是通过流水线提高吞吐量来缩减延迟的。<br>由于其设计目标的不同，CPU需要很强的通用性来处理各种不同的数据类型，同时逻辑判断又会引入大量的分支跳转和中断的处理。而GPU面对的则是类型统一的、相互无依赖的大规模数据和不需要被打断的纯净的计算环境。</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/CenterWander/tuchuang/main/img/20230505172955.png\" alt=\"image.png\"></p>\n<h3 id=\"CUDA线程组织形式\"><a href=\"#CUDA线程组织形式\" class=\"headerlink\" title=\"CUDA线程组织形式\"></a>CUDA线程组织形式</h3><p><img src=\"https://s2.loli.net/2023/03/26/C3A4mBKe5MNXqjE.png\" alt=\"image.png\"><br>Thread：并行的基本单位<br>Thread Block：互相合作的线程组<br>允许彼此同步<br>通过快速共享内存交换数据<br>以1维、2维或3维组织<br>最多包含1024个线程<br>Grid：一组线程块<br>以1维、2维组织，也可3维<br>共享全局变量<br>Kernel：在GPU上执行的核心程序<br>One kernel             One Grid</p>\n<h3 id=\"CUDA主机-设备编程模型\"><a href=\"#CUDA主机-设备编程模型\" class=\"headerlink\" title=\"CUDA主机&#x2F;设备编程模型\"></a>CUDA主机&#x2F;设备编程模型</h3><h4 id=\"函数限界符\"><a href=\"#函数限界符\" class=\"headerlink\" title=\"函数限界符\"></a>函数限界符</h4><ul>\n<li>_ <em>device</em> _:在device端执行，并且也只能从device端调用，即作为device端的子函数来使用。</li>\n<li>_ <em>host</em> _:在host端执行，也只能从host端调用，与一般的C函数相同。不可以和__global__同时用，但可和__device__，此时函数会在device和host都编译。</li>\n<li>_ <em>global</em> _ :即kernel函数，它在设备上执行，但是要从host端调用。</li>\n</ul>\n<h4 id=\"CUDA核函数的限制\"><a href=\"#CUDA核函数的限制\" class=\"headerlink\" title=\"CUDA核函数的限制\"></a>CUDA核函数的限制</h4><ol>\n<li>只能访问设备内存</li>\n<li>必须返回void类型</li>\n<li>不支持可变数量的参数</li>\n<li>不支持静态变量</li>\n<li>显示异步行为，意味着<strong>host不会等待kernel执行</strong>完就执行下一步</li>\n</ol>\n<h3 id=\"并行计算模型SIMT\"><a href=\"#并行计算模型SIMT\" class=\"headerlink\" title=\"并行计算模型SIMT\"></a>并行计算模型SIMT</h3><p>线程块是程序启动的基本单位，线程束是程序执行的单位；</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>例如，我们说一个块大小是256个线程时，也就是意味着线程块大小为8个线程束。每个线程束总是包含32个线程。这个参数表明：虽然启动程序时，每个线程块有256个线程，但这并不意味着它们会立即执行，也就是说这256个线程并不会在同一时刻都被执行或完成执行。相反，GPU的执行硬件会用8个线程束来执行这些线程。</p></blockquote>\n<p>SIMT属于SIMD的范畴，因为它也是在多个数据上执行相同的指令。但是，SIMT允许由用户来分配线程，具体来说就是CUDA为每个线程指定了标识符（编号）。<br>一个关键的区别就是SIMD要求同一个向量中的所有元素要在一个统一的同步组中一起执行，而SIMT则允许属于同一个线程束的多个线程独立执行，这几个线程可以有不同的行为。因此SIMT允许线程级并发，也就是在统一线程束下的线程可以同时做不同的事情。<br>三个不同：</p>\n<ul>\n<li>每个线程都有自己的指令地址计数器</li>\n<li>每个线程都有自己的寄存器状态</li>\n<li>每个线程可以有一个独立的执行路径</li>\n</ul>\n<h3 id=\"GPU架构\"><a href=\"#GPU架构\" class=\"headerlink\" title=\"GPU架构\"></a>GPU架构</h3><p><strong>流式多处理器SM</strong><br>一个线程块只能在一个SM上被调度，但一个SM可以对应多个线程块。<br>当SM指定了一个或多个要计算的线程块时，这些线程块会被分为多个warp，等待调度。<br>线程束中的线程都在不同的数据上执行相同的命令。<br>SM容纳线程块的数量，取决于SM内的共享内存和寄存器以及线程占用的资源。<br>线程块里的所有线程在逻辑上并行运行，但并不是所有的线程都可以同时在物理层面执行。（一个SM同时只调度一个warp，其余warp等待，不同的warp间的切换是零开销的因为warp的执行上下文在warp的整个生命周期都会被SM维护）</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>NVIDIA GeForce RTX 3090的Compute Capabilities是8.6，其中包含82个SM，每个SM中允许同时存在的最大线程数量为1536，求：理论上同一时刻并行执行线程数量为多少？并发执行线程数量为多少？<br>其中包含82个SM，每个SM中允许同时存在的最大线程数量为1536，即最多可以存在48个warp，由于warp是通过warp调度器并发执行，warp中32条线程是并行执行，因此笼统上可以认为，同一时刻并行执行线程数量为82*32&#x3D;2624，并发执行线程数量为82*32*48&#x3D;125952。</p></blockquote>\n<h3 id=\"内存模型\"><a href=\"#内存模型\" class=\"headerlink\" title=\"内存模型\"></a>内存模型</h3><table>\n<thead>\n<tr>\n<th>存储器</th>\n<th>位置</th>\n<th>是否缓存</th>\n<th>访问权限</th>\n<th>生存周期</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>寄存器</td>\n<td>片上</td>\n<td>无</td>\n<td>device</td>\n<td>与线程、核函数相同</td>\n</tr>\n<tr>\n<td>共享内存</td>\n<td>片上</td>\n<td>无</td>\n<td>device</td>\n<td>与block相同</td>\n</tr>\n<tr>\n<td>本地内存</td>\n<td>板载</td>\n<td>无</td>\n<td>device</td>\n<td>与线程、核函数相同</td>\n</tr>\n<tr>\n<td>全局内存</td>\n<td>板载</td>\n<td>无</td>\n<td>device&amp;host</td>\n<td>程序</td>\n</tr>\n<tr>\n<td>纹理内存、常量内存</td>\n<td>板载</td>\n<td>有</td>\n<td>device&amp;host</td>\n<td>程序</td>\n</tr>\n</tbody></table>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>定义在CUDA核函数中的变量，什么时候是寄存器变量，什么时候是本地变量呢？</p></blockquote>\n<p>以下三种情况是本地变量，其余则寄存器变量</p>\n<ul>\n<li>编译阶段无法确定的数组</li>\n<li>数组或结构体占用的空间很大</li>\n<li>核函数中定义了很多的变量，寄存器装不下、<br>从寄存器溢出到本地内存的，本质上与全局内存在同一个存储区域</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/CenterWander/tuchuang/main/img/20230507203938.png\" alt=\"image.png\"><br><img src=\"https://raw.githubusercontent.com/CenterWander/tuchuang/main/img/20230507203950.png\" alt=\"image.png\"></p>\n<h3 id=\"内存访问模式\"><a href=\"#内存访问模式\" class=\"headerlink\" title=\"内存访问模式\"></a>内存访问模式</h3><p>全局内存通过缓存来实现加载&#x2F;存储。所有对全局内存的访问都会通过L2 cache（一般128字节）。<br><strong>对齐访问</strong><br>第一个地址是缓存粒度（一般32字节）的偶数倍（cache line取数据开始位置就是如此）<br><strong>合并访问</strong><br>一个线程束中的全部线程访问一个连续的内存块。合并访问指的是线程束对全局内存的一次访问请求导致最少的数据传输（合并度&#x3D;100%），否则是非合并访问。</p>\n<p><font color=\"#7030a0\">5种访问方式，合并度的计算？？</font> </p>\n<p>如果说读取和写入都不能合并访问，那么应该优先保证合并写入。只读数据的非合并访问，可以用__ldg()函数做缓存，也可以用共享内存转换为合并地。</p>\n<h3 id=\"共享内存与bank-conflict\"><a href=\"#共享内存与bank-conflict\" class=\"headerlink\" title=\"共享内存与bank conflict\"></a>共享内存与bank conflict</h3><p>共享内存可以被程序员直接操控。<br>共享内存被划分为许多的banks.</p>\n<ul>\n<li>一个warp中的所有线程访问同一bank同一地址-广播</li>\n<li>一个warp中的不同线程访问<strong>一个bank的不同地址</strong>-bank conflict</li>\n<li>多个线程访问同一bank同一地址-多播</li>\n</ul>\n<p>Memory Padding 内存填充解决Bank confilct<br><img src=\"https://raw.githubusercontent.com/CenterWander/tuchuang/main/img/20230507160525.png\" alt=\"image.png\"><br>Padding操作：在sData的第二维+1，即<code>sData[BS][BS+1]</code><br>填充的部分不能用于数据存储，导致可用的共享内存数量减少。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"图像翻转CPU\"><a href=\"#图像翻转CPU\" class=\"headerlink\" title=\"图像翻转CPU\"></a>图像翻转CPU</h3><p>多线程翻转图像，同时手动维护缓存。</p>\n<div class=\"language-c\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">c</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">MTFlipHM</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">tid</span><span style=\"color: #F8F8F2\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">struct</span><span style=\"color: #F8F8F2\"> Pixel pix;</span><span style=\"color: #6272A4\"> //temp swap pixel</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> row, col;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> id </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">((</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">) tid);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> start </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> id </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> ip.Vpixels</span><span style=\"color: #FF79C6\">/</span><span style=\"color: #F8F8F2\">NumThreads;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> end </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> start </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> ip.Vpixels</span><span style=\"color: #FF79C6\">/</span><span style=\"color: #F8F8F2\">NumThreads;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">unsigned</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">char</span><span style=\"color: #F8F8F2\"> buffer[</span><span style=\"color: #BD93F9\">16384</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (row </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> st ; row </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> ed; row</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #50FA7B\">memcpy</span><span style=\"color: #F8F8F2\">(buffer, TheImage[row], ip.Hbytes);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            col </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">while</span><span style=\"color: #F8F8F2\"> (col </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> ip.Hpixels </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">/</span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            pix.B </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> buffer[col];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            pix.G </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> buffer[col</span><span style=\"color: #FF79C6\">+</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            pix.R </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> buffer[col</span><span style=\"color: #FF79C6\">+</span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            buffer[col]   </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> buffer[ip.Hpixels</span><span style=\"color: #FF79C6\">*</span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> col </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            buffer[col</span><span style=\"color: #FF79C6\">+</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> buffer[ip.Hpixels</span><span style=\"color: #FF79C6\">*</span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> col </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            buffer[col</span><span style=\"color: #FF79C6\">+</span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> buffer[ip.Hpixels</span><span style=\"color: #FF79C6\">*</span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> col </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            buffer[ip.Hpixels</span><span style=\"color: #FF79C6\">*</span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> col </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> pix.B;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            buffer[ip.Hpixels</span><span style=\"color: #FF79C6\">*</span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> col </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> pix.G;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            buffer[ip.Hpixels</span><span style=\"color: #FF79C6\">*</span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> col </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> pix.R;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            col </span><span style=\"color: #FF79C6\">+=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">memcpy</span><span style=\"color: #F8F8F2\">(TheImage[row],buffer,ip.Hbytes);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">pthread_exit</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">NULL</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">MTFlipVM</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FFB86C; font-style: italic\">tid</span><span style=\"color: #F8F8F2\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">struct</span><span style=\"color: #F8F8F2\"> Pixel pix;</span><span style=\"color: #6272A4\"> //temp swap pixel</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> row, col;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> id </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">((</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">) tid);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> start </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> id </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> ip.Vpixels</span><span style=\"color: #FF79C6\">/</span><span style=\"color: #F8F8F2\">NumThreads;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> end </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> start </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> ip.Vpixels</span><span style=\"color: #FF79C6\">/</span><span style=\"color: #F8F8F2\">NumThreads;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">unsigned</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">char</span><span style=\"color: #F8F8F2\"> buffer1[</span><span style=\"color: #BD93F9\">16384</span><span style=\"color: #F8F8F2\">], buffer2[</span><span style=\"color: #BD93F9\">16384</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (row </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> start; row </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> end; row </span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #50FA7B\">memcpy</span><span style=\"color: #F8F8F2\">(buffer1,TheImage[row],ip.Hbytes);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\">  mirrow </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> ip.Vpixels </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> row;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #50FA7B\">memcpy</span><span style=\"color: #F8F8F2\">(buffer2,TheImage[mirrow],ip.Hbytes);</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">            // 再错位拷贝即完成交换</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #50FA7B\">memcpy</span><span style=\"color: #F8F8F2\">(TheImage[row],buffer2,ip.Hbytes);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            </span><span style=\"color: #50FA7B\">memcpy</span><span style=\"color: #F8F8F2\">(TheImage[mirrow],buffer1,ip.Hbytes);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #50FA7B\">pthread_create</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">ThHandle[i], </span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #FFB86C; font-style: italic\">ThAttr</span><span style=\"color: #F8F8F2\">, MTFlipFunc, (</span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">)</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">ThParam[i]);</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\">(i</span><span style=\"color: #FF79C6\">=</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; i</span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\">NumThreads; i</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">                </span><span style=\"color: #50FA7B\">pthread_join</span><span style=\"color: #F8F8F2\">(ThHandle[i], </span><span style=\"color: #BD93F9\">NULL</span><span style=\"color: #F8F8F2\">);</span></span></code></pre></div><h3 id=\"数组相加\"><a href=\"#数组相加\" class=\"headerlink\" title=\"数组相加\"></a>数组相加</h3><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> a</span><span style=\"color: #FF79C6\">=</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">, b</span><span style=\"color: #FF79C6\">=</span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">, c</span><span style=\"color: #FF79C6\">=</span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">__global__ </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">add</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">double</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">x, </span><span style=\"color: #FF79C6\">double</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">y, </span><span style=\"color: #FF79C6\">double*</span><span style=\"color: #F8F8F2\"> z)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> n </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> blockIdx.x </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> blockDim.x </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> threadIdx.x;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (n</span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\">N)  z[n] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> x[n] </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> y[n];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">main</span><span style=\"color: #F8F8F2\">()&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> N </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #FF79C6\">e</span><span style=\"color: #BD93F9\">9</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> M </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">sizeof</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">double</span><span style=\"color: #F8F8F2\">) </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> N;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">double</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">h_x </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">double*</span><span style=\"color: #F8F8F2\">) </span><span style=\"color: #50FA7B\">malloc</span><span style=\"color: #F8F8F2\">(M);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">double</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">h_y </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">double*</span><span style=\"color: #F8F8F2\">) </span><span style=\"color: #50FA7B\">malloc</span><span style=\"color: #F8F8F2\">(M);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">double</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">h_z </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">double*</span><span style=\"color: #F8F8F2\">) </span><span style=\"color: #50FA7B\">malloc</span><span style=\"color: #F8F8F2\">(M);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> i</span><span style=\"color: #FF79C6\">=</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; i</span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\">N; i</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        h_x[i] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> a;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        h_y[i] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> b;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">double</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">d_x, </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">d_y, </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">d_z;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">cudaMalloc</span><span style=\"color: #F8F8F2\">((</span><span style=\"color: #FF79C6\">void**</span><span style=\"color: #F8F8F2\">) </span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">d_x, M);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">cudaMalloc</span><span style=\"color: #F8F8F2\">((</span><span style=\"color: #FF79C6\">void**</span><span style=\"color: #F8F8F2\">) </span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">d_y, M);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">cudaMalloc</span><span style=\"color: #F8F8F2\">((</span><span style=\"color: #FF79C6\">void**</span><span style=\"color: #F8F8F2\">) </span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">d_z, M);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> block_size </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\">  </span><span style=\"color: #BD93F9\">128</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> grid_size </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (N</span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\">block_size</span><span style=\"color: #FF79C6\">-</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">) </span><span style=\"color: #FF79C6\">/</span><span style=\"color: #F8F8F2\"> block_size;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    add</span><span style=\"color: #FF79C6\">&lt;&lt;&lt;</span><span style=\"color: #F8F8F2\">grid_size, block_size</span><span style=\"color: #FF79C6\">&gt;&gt;&gt;</span><span style=\"color: #F8F8F2\">(d_x, d_y, d_z);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">cudaMemcpy</span><span style=\"color: #F8F8F2\">(h_z, d_z, M, cudaMemcpyDeviceToHost);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">free</span><span style=\"color: #F8F8F2\">(h_x),</span><span style=\"color: #50FA7B\">free</span><span style=\"color: #F8F8F2\">(h_y),</span><span style=\"color: #50FA7B\">free</span><span style=\"color: #F8F8F2\">(h_z);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">cudaFree</span><span style=\"color: #F8F8F2\">(d_x),</span><span style=\"color: #50FA7B\">cudaFree</span><span style=\"color: #F8F8F2\">(d_y),</span><span style=\"color: #50FA7B\">cudaFree</span><span style=\"color: #F8F8F2\">(d_z);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;</span></span></code></pre></div><h3 id=\"图像翻转\"><a href=\"#图像翻转\" class=\"headerlink\" title=\"图像翻转\"></a>图像翻转</h3><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">__global__ </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">Vflip</span><span style=\"color: #F8F8F2\">(uch </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">ImgDst, uch </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">ImgSrc, ui Hpixels, ui Vpixels)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui ThrPerBlk </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> blockDim.x;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui MYbid </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> blockIdx.x;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui MYtid </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> threadIdx.x;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui MYgtid </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> ThrPerBlk </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> MYbid </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> MYtid;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui BlkPerRow </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (Hpixels </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> ThrPerBlk </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">) </span><span style=\"color: #FF79C6\">/</span><span style=\"color: #F8F8F2\"> ThrPerBlk;</span><span style=\"color: #6272A4\"> // ceil</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui RowBytes </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (Hpixels </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">) </span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">~</span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui MYrow </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> MYbid </span><span style=\"color: #FF79C6\">/</span><span style=\"color: #F8F8F2\"> BlkPerRow;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui MYcol </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> MYgtid </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> MYrow</span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">BlkPerRow</span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">ThrPerBlk;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (MYcol </span><span style=\"color: #FF79C6\">&gt;=</span><span style=\"color: #F8F8F2\"> Hpixels) </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\">;</span><span style=\"color: #6272A4\">// col out of range</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui MYmirrorrow </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> Vpixels </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> MYrow;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui MYsrcOffset </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> MYrow </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> RowBytes;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui MYdstOffset </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> MYmirrorrow </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> RowBytes;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui MYsrcIndex </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> MYsrcOffset </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> MYcol;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui MYdstIndex </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> MYdstOffset </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> MYcol;</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">// swap pixels RGB @MYcol , @MYmirrorcol</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ImgDst[MYdstIndex] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> ImgSrc[MYsrcIndex];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ImgDst[MYdstIndex </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> ImgSrc[MYsrcIndex </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ImgDst[MYdstIndex </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> ImgSrc[MYsrcIndex </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">];&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">__global__ </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">Hflip</span><span style=\"color: #F8F8F2\">(uch </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">ImgDst, uch </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">ImgSrc, ui Hpixels)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui ThrPerBlk </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> blockDim.x;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui MYbid </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> blockIdx.x;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui MYtid </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> threadIdx.x;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui MYgtid </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> ThrPerBlk </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> MYbid </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> MYtid;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui BlkPerRow </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (Hpixels </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> ThrPerBlk </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\"> ) </span><span style=\"color: #FF79C6\">/</span><span style=\"color: #F8F8F2\"> ThrPerBlk;</span><span style=\"color: #6272A4\"> // ceil</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui RowBytes </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (Hpixels </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">) </span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">~</span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui MYrow </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> MYbid </span><span style=\"color: #FF79C6\">/</span><span style=\"color: #F8F8F2\"> BlkPerRow;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui MYcol </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> MYgtid </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> MYrow</span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">BlkPerRow</span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">ThrPerBlk;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (MYcol </span><span style=\"color: #FF79C6\">&gt;=</span><span style=\"color: #F8F8F2\"> Hpixels) </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\">;</span><span style=\"color: #6272A4\">// col out of range</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui MYmirrorcol </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> Hpixels </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> MYcol;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui MYoffset </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> MYrow </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> RowBytes;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui MYsrcIndex </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> MYoffset </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> MYcol;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ui MYdstIndex </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> MYoffset </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">3</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> MYmirrorcol;</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">// swap pixels RGB @MYcol , @MYmirrorcol</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ImgDst[MYdstIndex] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> ImgSrc[MYsrcIndex];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ImgDst[MYdstIndex </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> ImgSrc[MYsrcIndex </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">ImgDst[MYdstIndex </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> ImgSrc[MYsrcIndex </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">];&#125;</span></span></code></pre></div><h3 id=\"矩阵转置\"><a href=\"#矩阵转置\" class=\"headerlink\" title=\"矩阵转置\"></a>矩阵转置</h3><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">__global__ </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">transpose</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> a[], </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> b[], </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> N)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    //分配共享内存</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    __shared__ </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> S[TILE][TILE </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> bx </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> blockIdx.x </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> TILE;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> by </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> blockIdx.y </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> TILE;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> ix </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> bx </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> threadIdx.x;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> iy </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> by </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> threadIdx.y;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (ix </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> N </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> iy </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> N)</span><span style=\"color: #6272A4\">// 读入共享内存</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        S[threadIdx.y][threadIdx.x] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> a[iy </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> N </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> ix];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">__syncthreads</span><span style=\"color: #F8F8F2\">();</span><span style=\"color: #6272A4\">//同步，这是必不可少的</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> ix2 </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> bx </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> threadIdx.y;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> iy2 </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> by </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> threadIdx.x;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (ix2 </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\">N </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> iy2 </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> N)</span><span style=\"color: #6272A4\">// 写回</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        b[ix2 </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> N </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> iy2 ] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> S[threadIdx.x][threadIdx.y];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;</span></span></code></pre></div><h3 id=\"方阵相乘\"><a href=\"#方阵相乘\" class=\"headerlink\" title=\"方阵相乘\"></a>方阵相乘</h3><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">__shared__ </span><span style=\"color: #FF79C6\">float</span><span style=\"color: #F8F8F2\"> Mds[WIDTH][TILE_WIDTH];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">__shared__ </span><span style=\"color: #FF79C6\">float</span><span style=\"color: #F8F8F2\"> Nds[TILE_WIDTH][WIDTH];</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> bx</span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\">blockIdx.x ; </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> by </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> blockIdx.y;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> tx</span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\">threadIdx.x ; </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> ty </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> threadIdx.y;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> Row </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> by </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">TILE_WIDTH </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\">ty;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> Col </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> bx</span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">TILE_WIDTH </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> tx;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">float</span><span style=\"color: #F8F8F2\"> Pvalue </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> m</span><span style=\"color: #FF79C6\">=</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; m</span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\">WIDTH</span><span style=\"color: #FF79C6\">/</span><span style=\"color: #F8F8F2\">TILE_WIDTH; </span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">m)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#123;</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    // 每个线程载入M的子矩阵的一个元素</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    Mds[ty][tx] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> Md[Row</span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">width</span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\">(m</span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">TILE_WIDTH</span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\">tx)];</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    //每个线程载入N的子矩阵的一个元素</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    Nds[ty][tx] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> Nd[(m</span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">TILE_WIDTH</span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\">ty)</span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">width</span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\">Col];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">     </span><span style=\"color: #50FA7B\">__syncthreads</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">     </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> k </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; k </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> TILE_WIDTH; </span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">k)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        Pvalue </span><span style=\"color: #FF79C6\">+=</span><span style=\"color: #F8F8F2\"> Mds[ty][k] </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> Nds[k][tx];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">     </span><span style=\"color: #50FA7B\">__syncthreads</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">     &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">Pd[Row</span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">WIDTH</span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\">Col] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> Pvalue;</span><span style=\"color: #6272A4\">//将结果写回P矩阵</span></span></code></pre></div><h3 id=\"直方图\"><a href=\"#直方图\" class=\"headerlink\" title=\"直方图\"></a>直方图</h3><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">#define</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">SIZE</span><span style=\"color: #F8F8F2\"> (100*1024*1024)</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">//通过工具函数big_random_block()来生成随机的字节流</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">unsigned</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">char</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">buffer </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">unsigned</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">char*</span><span style=\"color: #F8F8F2\">)</span><span style=\"color: #50FA7B\">big_random_block</span><span style=\"color: #F8F8F2\">( SIZE );</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">unsigned</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> histo[</span><span style=\"color: #BD93F9\">256</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; i</span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #BD93F9\">256</span><span style=\"color: #F8F8F2\">; i</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    histo[i] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; i </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> SIZE; i</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    histo[buffer[i]]</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">long</span><span style=\"color: #F8F8F2\"> histoCount </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; i</span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #BD93F9\">256</span><span style=\"color: #F8F8F2\">; i</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    histoCount </span><span style=\"color: #FF79C6\">+=</span><span style=\"color: #F8F8F2\"> histo[i]; &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">__global__ </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">histo_kernel</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">unsigned</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">char</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">buffer, </span><span style=\"color: #FF79C6\">long</span><span style=\"color: #F8F8F2\"> size, </span><span style=\"color: #FF79C6\">unsigned</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">histo)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">__shared__ </span><span style=\"color: #FF79C6\">unsigned</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> temp[</span><span style=\"color: #BD93F9\">256</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">temp[threadIdx.x] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #50FA7B\">__syncthreads</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> threadIdx.x </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> blockIdx.x </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> blockDim.x;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> offset </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> blockDim.x </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">gridDim.x;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">while</span><span style=\"color: #F8F8F2\"> (i</span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\">size)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">atomicAdd</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">temp[buffer[i]], </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    i </span><span style=\"color: #FF79C6\">+=</span><span style=\"color: #F8F8F2\"> offset;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #50FA7B\">__syncthreads</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #50FA7B\">atomicAdd</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">(histo[threadIdx.x]), temp[threadIdx.x]);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;</span></span></code></pre></div><h3 id=\"规约求和\"><a href=\"#规约求和\" class=\"headerlink\" title=\"规约求和\"></a>规约求和</h3><p>规约求和与TOP K类似，下面的代码为官方代码，理解参考<a href=\"https://blog.csdn.net/weixin_48266461/article/details/125670866\">这篇文章</a> </p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">__global__ </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">_sum_gpu</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">input, </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> count, </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">output)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    __shared__ </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> sum_per_block[BLOCK_SIZE];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> temp </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> idx </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> threadIdx.x </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> blockDim.x </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> blockIdx.x;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">         idx </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> count; idx </span><span style=\"color: #FF79C6\">+=</span><span style=\"color: #F8F8F2\"> gridDim.x </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> blockDim.x</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    )</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#123;</span><span style=\"color: #6272A4\">// 跨网格循环，一个线程加多个数据，应对海量数据</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        temp </span><span style=\"color: #FF79C6\">+=</span><span style=\"color: #F8F8F2\"> input[idx];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    sum_per_block[threadIdx.x] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> temp;</span><span style=\"color: #6272A4\">  //the per-thread partial sum is temp!</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">__syncthreads</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #6272A4\">//**********shared memory summation stage***********</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> length </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> BLOCK_SIZE </span><span style=\"color: #FF79C6\">/</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">; length </span><span style=\"color: #FF79C6\">&gt;=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">; length </span><span style=\"color: #FF79C6\">/=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> double_kill </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (threadIdx.x </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> length)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        double_kill </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> sum_per_block[threadIdx.x] </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> sum_per_block[threadIdx.x </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> length];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">__syncthreads</span><span style=\"color: #F8F8F2\">();</span><span style=\"color: #6272A4\">  //why we need two __syncthreads() here, and,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (threadIdx.x </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> length)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        sum_per_block[threadIdx.x] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> double_kill;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">__syncthreads</span><span style=\"color: #F8F8F2\">();</span><span style=\"color: #6272A4\">  //....here ?</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#125;</span><span style=\"color: #6272A4\"> //the per-block partial sum is sum_per_block[0]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (blockDim.x </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> blockIdx.x </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> count)</span><span style=\"color: #6272A4\"> //in case that our users are naughty</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#123;</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">        //the final reduction performed by atomicAdd()</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (threadIdx.x </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">) </span><span style=\"color: #50FA7B\">atomicAdd</span><span style=\"color: #F8F8F2\">(output, sum_per_block[</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">]);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;</span></span>\n<span class=\"line\"></span></code></pre></div><h3 id=\"TOP-K\"><a href=\"#TOP-K\" class=\"headerlink\" title=\"TOP K\"></a>TOP K</h3><p>具体实现流程如下：</p>\n<ol>\n<li>将数据复制到GPU显存中<br> <code>float *d_data; cudaMemcpy(d_data, h_data, size, cudaMemcpyHostToDevice);</code></li>\n<li>将数据存储到二元组中</li>\n</ol>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">typedef</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">struct</span><span style=\"color: #F8F8F2\"> &#123;     </span><span style=\"color: #FF79C6\">float</span><span style=\"color: #F8F8F2\"> value;     </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> index; &#125; </span><span style=\"color: #8BE9FD; font-style: italic\">Tuple</span><span style=\"color: #F8F8F2\">;  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">Tuple </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">d_tuples; </span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> threadsPerBlock </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">256</span><span style=\"color: #F8F8F2\">; </span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> blocksPerGrid </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (n </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> threadsPerBlock </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">) </span><span style=\"color: #FF79C6\">/</span><span style=\"color: #F8F8F2\"> threadsPerBlock;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">initializeTuples</span><span style=\"color: #FF79C6\">&lt;&lt;&lt;</span><span style=\"color: #F8F8F2\">blocksPerGrid, threadsPerBlock</span><span style=\"color: #FF79C6\">&gt;&gt;&gt;</span><span style=\"color: #F8F8F2\">(d_data, d_tuples, n);</span></span></code></pre></div><ol start=\"3\">\n<li>对二元组进行归约操作，得到前K个最大&#x2F;最小值的索引</li>\n</ol>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">d_indices;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">kReduceKernel</span><span style=\"color: #FF79C6\">&lt;&lt;&lt;</span><span style=\"color: #F8F8F2\">blocksPerGrid, threadsPerBlock</span><span style=\"color: #FF79C6\">&gt;&gt;&gt;</span><span style=\"color: #F8F8F2\">(d_tuples, d_indices, n, k);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">__global__ </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">kReduceKernel</span><span style=\"color: #F8F8F2\">(Tuple </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">input, </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">output, </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> n, </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> k) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">extern</span><span style=\"color: #F8F8F2\"> __shared__ Tuple shared[];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> tid </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> threadIdx.x;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> blockIdx.x </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> blockDim.x </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> threadIdx.x;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    shared[tid] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (i </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> n) </span><span style=\"color: #FF79C6\">?</span><span style=\"color: #F8F8F2\"> input[i] </span><span style=\"color: #FF79C6\">:</span><span style=\"color: #F8F8F2\"> Tuple&#123;</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">&#125;;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">__syncthreads</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> s </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> blockDim.x </span><span style=\"color: #FF79C6\">/</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">; s </span><span style=\"color: #FF79C6\">&gt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; s </span><span style=\"color: #FF79C6\">&gt;&gt;=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (tid </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> s)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            shared[tid] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (shared[tid].value </span><span style=\"color: #FF79C6\">&gt;</span><span style=\"color: #F8F8F2\"> shared[tid </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> s].value) </span><span style=\"color: #FF79C6\">?</span><span style=\"color: #F8F8F2\"> shared[tid] </span><span style=\"color: #FF79C6\">:</span><span style=\"color: #F8F8F2\"> shared[tid </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> s];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">__syncthreads</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (tid </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        output[blockIdx.x] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> shared[</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">].index;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;</span></span></code></pre></div><ol start=\"5\">\n<li>在CPU中恢复原始数据并按照索引排序，得到前K个最大&#x2F;最小值</li>\n</ol>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #50FA7B\">cudaMemcpy</span><span style=\"color: #F8F8F2\">(h_indices, d_indices, size, cudaMemcpyDeviceToHost);  </span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; i </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> k; </span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">i) &#123;     </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> index </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> h_indices[i];     </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    h_result[i] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> h_data[index]; &#125;  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #50FA7B\">sort</span><span style=\"color: #F8F8F2\">(h_result, h_result </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> k);</span></span></code></pre></div><p>完成以上步骤后，就可以得到排序后的前K个最大&#x2F;最小值了。</p>\n<h2 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h2><p><strong>实验一</strong>：PI的三种求法、线程池<br>实验二：矩阵相乘、转置、规约、TOP K 问题<br>全局内存、共享内存优化、bank冲突优化<br>手写并行计算报告3-4页纸 cpu pi三种求法 生产者消费者模式 GPU 主程序流程明确一次即可，核函数不同，重点全局内存与共享内存实现， 矩阵相乘直方图(跨网格循环)规约100w数组中的最大值 报告在考试时上交</p>\n<h2 id=\"20级真题\"><a href=\"#20级真题\" class=\"headerlink\" title=\"20级真题\"></a>20级真题</h2><h3 id=\"简答题\"><a href=\"#简答题\" class=\"headerlink\" title=\"简答题\"></a>简答题</h3><p><strong>Amdel定律，处理器n个，串行40%，求加速比极限。</strong><br><strong>给RGB图像680*480，分4个线程（没说怎么分），每个线程处理的像素范围和字节范围；</strong><br><strong>PPT线程束并行并发数量的例题原题；</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>NVIDIA GeForce RTX 3090的Compute Capabilities是8.6，其中包含82个SM，每个SM中允许同时存在的最大线程数量为1536，求：理论上同一时刻并行执行线程数量为多少？并发执行线程数量为多少？<br>其中包含82个SM，每个SM中允许同时存在的最大线程数量为1536，即最多可以存在48个warp，由于warp是通过warp调度器并发执行，warp中32条线程是并行执行，因此笼统上可以认为，同一时刻并行执行线程数量为82*32&#x3D;2624，并发执行线程数量为82*32*48&#x3D;125952。</p></blockquote>\n<p><strong>矩阵转置过程的某个元素全局id；</strong><br><img src=\"https://raw.githubusercontent.com/CenterWander/tuchuang/main/img/20230511162559.png\" alt=\"image.png\"><br>问元素3的全局id<br><strong>可不可以一边复制数据，一边转置（CUDA流）</strong>；</p>\n<h3 id=\"程序分析题\"><a href=\"#程序分析题\" class=\"headerlink\" title=\"程序分析题\"></a>程序分析题</h3><p>第一题，课堂练习原题；&lt;4,4&gt;改成了&lt;5,5&gt;；要说明过程；<br><img src=\"https://raw.githubusercontent.com/CenterWander/tuchuang/main/img/20230511161714.png\" alt=\"程序分析一\"><br>第二题，少了原子操作的直方图规约，问有什么问题；</p>\n<h3 id=\"CPU编程\"><a href=\"#CPU编程\" class=\"headerlink\" title=\"CPU编程\"></a>CPU编程</h3><p>求数组<code>a[2,1000000]</code>中的素数，要求10个线程等分；<br>线程池伪代码：客户端、服务端（邮件功能、导出功能、流量统计等一堆功能）；</p>\n<h3 id=\"GPU编程\"><a href=\"#GPU编程\" class=\"headerlink\" title=\"GPU编程\"></a>GPU编程</h3><p>全局内存的矩阵相乘；<br>向量a,b内积，维数&#x3D;1024000000；定死blockdim.x &#x3D; blockdim.y &#x3D;16; 设计Grid；要求用共享内存优化、解决bank冲突、输出结果回到CPU做最终合并。</p>\n<p>感受：非代码题宝宝巴士，代码题重拳出击，根本写不完。</p>\n","text":"复习课第一章 Amdal 定律 对定律的理解（任务不变的情况下，速度的提升、加速比）、加速的极限应用题 6’*5网格和线程块的布局，计算全局id并行、并发、线程...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"大数据","slug":"大数据","count":11,"path":"api/categories/大数据.json"}],"tags":[{"name":"学习笔记","slug":"学习笔记","count":17,"path":"api/tags/学习笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E4%B9%A0%E8%AF%BE\"><span class=\"toc-text\">复习课</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">并行计算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C\"><span class=\"toc-text\">并发与并行</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Flynn%E5%88%86%E7%B1%BB%E6%B3%95\"><span class=\"toc-text\">Flynn分类法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Amdahl%E5%AE%9A%E5%BE%8B\"><span class=\"toc-text\">Amdahl定律</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CUDA%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">CUDA概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%9E%84%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">异构计算</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CPU%E5%92%8CGPU%E7%9A%84%E5%B7%AE%E5%BC%82\"><span class=\"toc-text\">CPU和GPU的差异</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CUDA%E7%BA%BF%E7%A8%8B%E7%BB%84%E7%BB%87%E5%BD%A2%E5%BC%8F\"><span class=\"toc-text\">CUDA线程组织形式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CUDA%E4%B8%BB%E6%9C%BA-%E8%AE%BE%E5%A4%87%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">CUDA主机&#x2F;设备编程模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E9%99%90%E7%95%8C%E7%AC%A6\"><span class=\"toc-text\">函数限界符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CUDA%E6%A0%B8%E5%87%BD%E6%95%B0%E7%9A%84%E9%99%90%E5%88%B6\"><span class=\"toc-text\">CUDA核函数的限制</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E6%A8%A1%E5%9E%8BSIMT\"><span class=\"toc-text\">并行计算模型SIMT</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#GPU%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">GPU架构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">内存模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E8%AE%BF%E9%97%AE%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">内存访问模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E4%B8%8Ebank-conflict\"><span class=\"toc-text\">共享内存与bank conflict</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">代码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E5%83%8F%E7%BF%BB%E8%BD%ACCPU\"><span class=\"toc-text\">图像翻转CPU</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E7%9B%B8%E5%8A%A0\"><span class=\"toc-text\">数组相加</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E5%83%8F%E7%BF%BB%E8%BD%AC\"><span class=\"toc-text\">图像翻转</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9F%A9%E9%98%B5%E8%BD%AC%E7%BD%AE\"><span class=\"toc-text\">矩阵转置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E9%98%B5%E7%9B%B8%E4%B9%98\"><span class=\"toc-text\">方阵相乘</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%B4%E6%96%B9%E5%9B%BE\"><span class=\"toc-text\">直方图</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%84%E7%BA%A6%E6%B1%82%E5%92%8C\"><span class=\"toc-text\">规约求和</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TOP-K\"><span class=\"toc-text\">TOP K</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%AA%8C\"><span class=\"toc-text\">实验</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#20%E7%BA%A7%E7%9C%9F%E9%A2%98\"><span class=\"toc-text\">20级真题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E7%AD%94%E9%A2%98\"><span class=\"toc-text\">简答题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90%E9%A2%98\"><span class=\"toc-text\">程序分析题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CPU%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">CPU编程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#GPU%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">GPU编程</span></a></li></ol></li></ol>","author":{"name":"以太工坊","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"分享我的课程学习笔记、经验与有趣的小玩意.图片等资源无法加载时请使用代理","socials":{"github":"https://github.com/Tim-Saijun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"telegram":{"icon":"/img/telegram.svg","link":"https://t.me/tim_run"},"Email":{"icon":"/img/mail.svg","link":"mailto:b@zair.top"},"RSS":{"icon":"/img/rss.svg","link":"/atom.xml"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Pyinstaller打包问题","uid":"261aff93f4c2c215eea5cbd52db7f4cd","slug":"Pyinstaller打包问题","date":"2023-05-14T05:14:15.000Z","updated":"2024-02-22T03:52:13.945Z","comments":true,"path":"api/articles/Pyinstaller打包问题.json","keywords":"计算机技术,大数据,人工智能","cover":null,"text":"1 Windows7 适配问题txtLoadLibrary: PyInstaller FormatMessageW failed.python 3.9 开始不再...","link":"","photos":[],"count_time":{"symbolsCount":661,"symbolsTime":"1 mins."},"categories":[{"name":"技术帖子","slug":"技术帖子","count":4,"path":"api/categories/技术帖子.json"}],"tags":[{"name":"技术帖子","slug":"技术帖子","count":1,"path":"api/tags/技术帖子.json"}],"author":{"name":"以太工坊","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"分享我的课程学习笔记、经验与有趣的小玩意.图片等资源无法加载时请使用代理","socials":{"github":"https://github.com/Tim-Saijun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"telegram":{"icon":"/img/telegram.svg","link":"https://t.me/tim_run"},"Email":{"icon":"/img/mail.svg","link":"mailto:b@zair.top"},"RSS":{"icon":"/img/rss.svg","link":"/atom.xml"}}}}},"next_post":{"title":"并行编程实验二","uid":"e17b6e9deb446fd76186e024fdae4f45","slug":"并行编程实验二","date":"2023-05-08T12:14:19.000Z","updated":"2024-02-22T03:52:13.965Z","comments":true,"path":"api/articles/并行编程实验二.json","keywords":"计算机技术,大数据,人工智能","cover":null,"text":"实验目的 掌握CUDA网格和线程块的设计 实践CUDA运行时API的使用 通过编写核函数，掌握利用GPU众核对大规模问题的求解加速的方法 体会CPU多核与GPU...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"大数据","slug":"大数据","count":11,"path":"api/categories/大数据.json"}],"tags":[{"name":"学习笔记","slug":"学习笔记","count":17,"path":"api/tags/学习笔记.json"}],"author":{"name":"以太工坊","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"分享我的课程学习笔记、经验与有趣的小玩意.图片等资源无法加载时请使用代理","socials":{"github":"https://github.com/Tim-Saijun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"telegram":{"icon":"/img/telegram.svg","link":"https://t.me/tim_run"},"Email":{"icon":"/img/mail.svg","link":"mailto:b@zair.top"},"RSS":{"icon":"/img/rss.svg","link":"/atom.xml"}}}}}}