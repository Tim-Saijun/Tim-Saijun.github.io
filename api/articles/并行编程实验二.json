{"title":"并行编程实验二","uid":"e17b6e9deb446fd76186e024fdae4f45","slug":"并行编程实验二","date":"2023-05-08T12:14:19.000Z","updated":"2024-02-22T03:52:13.965Z","comments":true,"path":"api/articles/并行编程实验二.json","keywords":"计算机技术,大数据,人工智能","cover":null,"content":"<h2 id=\"实验目的\"><a href=\"#实验目的\" class=\"headerlink\" title=\"实验目的\"></a>实验目的</h2><ul>\n<li>掌握CUDA网格和线程块的设计</li>\n<li>实践CUDA运行时API的使用</li>\n<li>通过编写核函数，掌握利用GPU众核对大规模问题的求解加速的方法</li>\n<li>体会CPU多核与GPU众核这两种不同体系结构带来的程序设计上的差异</li>\n</ul>\n<h2 id=\"实验内容\"><a href=\"#实验内容\" class=\"headerlink\" title=\"实验内容\"></a>实验内容</h2><h3 id=\"矩阵转置\"><a href=\"#矩阵转置\" class=\"headerlink\" title=\"矩阵转置\"></a>矩阵转置</h3><h4 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h4><ol>\n<li>将需要转置的矩阵存储到GPU内存中。</li>\n<li>在GPU上分配空间存储转置后的矩阵。</li>\n<li>定义CUDA核函数来实现矩阵转置。该核函数应该使用线程块和线程格的概念来处理矩阵中的所有元素。在每个线程块中，线程可以使用共享内存来处理数据。最后，利用全局内存将结果写回到GPU。</li>\n<li>调用CUDA核函数以执行矩阵转置。</li>\n<li>将转置后的矩阵从GPU内存复制到主机内存中。</li>\n<li>释放GPU内存</li>\n</ol>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>在传统代码的基础上，利用共享内存优化访问全局内存的方式，同时使用padding操作，避免bank冲突。</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> N </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">10000</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> TILE_DIM </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">32</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> grid_size_x </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (N </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> TILE_DIM </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">) </span><span style=\"color: #FF79C6\">/</span><span style=\"color: #F8F8F2\"> TILE_DIM;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> grid_size_y </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> grid_size_x;</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">dim3</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">block_size</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">TILE_DIM</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #8BE9FD; font-style: italic\">TILE_DIM</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">dim3</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">grid_size</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #8BE9FD; font-style: italic\">grid_size_x</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #8BE9FD; font-style: italic\">grid_size_y</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">__global__ </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">transpose</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">float</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">A, </span><span style=\"color: #FF79C6\">float</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">B, </span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> N)&#123;  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    __shared__ </span><span style=\"color: #FF79C6\">float</span><span style=\"color: #F8F8F2\"> S[TILE_DIM][TILE_DIM</span><span style=\"color: #FF79C6\">+</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> bx </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> blockIdx.x </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> TILE_DIM;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> by </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> blockIdx.y </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> TILE_DIM;</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    //顺序读</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> nx1 </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> bx </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> threadIdx.x;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> ny1 </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> by </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> threadIdx.y;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (nx1 </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> N </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> ny1 </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> N)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        S[threadIdx.y][threadIdx.x] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> A[ny1 </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> N </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> nx1];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">__syncthreads</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    //顺序写</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> nx2 </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> bx </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> threadIdx.y;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> ny2 </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> by </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> threadIdx.x;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (nx2 </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> N </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> ny2 </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> N)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        B[nx2 </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> N </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> ny2] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> S[threadIdx.x][threadIdx.y];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">main</span><span style=\"color: #F8F8F2\">()&#123;  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> nn </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> N </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> N;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> nBytes </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> nn </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">sizeof</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">float</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">float</span><span style=\"color: #F8F8F2\"> a </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1.1</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">float</span><span style=\"color: #F8F8F2\"> b </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">2.2</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    //cpu空间分配</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">float*</span><span style=\"color: #F8F8F2\"> A </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">float*</span><span style=\"color: #F8F8F2\">)</span><span style=\"color: #50FA7B\">malloc</span><span style=\"color: #F8F8F2\">(nBytes);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">float*</span><span style=\"color: #F8F8F2\"> B </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">float*</span><span style=\"color: #F8F8F2\">)</span><span style=\"color: #50FA7B\">malloc</span><span style=\"color: #F8F8F2\">(nBytes);</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    //矩阵初始化</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">; i </span><span style=\"color: #FF79C6\">&lt;=</span><span style=\"color: #F8F8F2\"> nn; i</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (i </span><span style=\"color: #FF79C6\">%</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            A[i</span><span style=\"color: #FF79C6\">-</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> a;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">else</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            A[i</span><span style=\"color: #FF79C6\">-</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> b;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #6272A4\">    //gpu空间分配（需要先定义）</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">float*</span><span style=\"color: #F8F8F2\"> d_A, </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> d_B;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">cudaMalloc</span><span style=\"color: #F8F8F2\">((</span><span style=\"color: #FF79C6\">void**</span><span style=\"color: #F8F8F2\">)</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">d_A, nBytes);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">cudaMalloc</span><span style=\"color: #F8F8F2\">((</span><span style=\"color: #FF79C6\">void**</span><span style=\"color: #F8F8F2\">)</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">d_B, nBytes);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">cudaMemcpy</span><span style=\"color: #F8F8F2\">(d_A, A, nBytes, cudaMemcpyHostToDevice);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    transpose</span><span style=\"color: #FF79C6\">&lt;&lt;&lt;</span><span style=\"color: #F8F8F2\">grid_size, block_size </span><span style=\"color: #FF79C6\">&gt;&gt;&gt;</span><span style=\"color: #F8F8F2\"> (d_A, d_B, N);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">cudaMemcpy</span><span style=\"color: #F8F8F2\">(B, d_B, nBytes, cudaMemcpyDeviceToHost);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">free</span><span style=\"color: #F8F8F2\">(A);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">free</span><span style=\"color: #F8F8F2\">(B);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">cudaFree</span><span style=\"color: #F8F8F2\">(d_A);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">cudaFree</span><span style=\"color: #F8F8F2\">(d_B);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;</span></span></code></pre></div><h3 id=\"矩阵相乘\"><a href=\"#矩阵相乘\" class=\"headerlink\" title=\"矩阵相乘\"></a>矩阵相乘</h3><h4 id=\"核函数设计\"><a href=\"#核函数设计\" class=\"headerlink\" title=\"核函数设计\"></a>核函数设计</h4><p><strong>共享内存的使用</strong>：应该将两个原始矩阵的一部分抽取出来，当作瓦片，放入共享内存，减少对全局内存的访问，从而提高程序性能。<br><strong>非方阵处理</strong>：非方阵的两个矩阵相乘，需要调整共享内存中瓦片的尺寸，同时需要添加判断语句，防止发生越界错误。</p>\n<h4 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">__global__ </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">matrixmul</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">float</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">A, </span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">float</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">B, </span><span style=\"color: #FF79C6\">float</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">C,</span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> N,</span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> M,</span><span style=\"color: #FF79C6\">const</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> K)&#123;</span><span style=\"color: #6272A4\">   //N*M x M*K</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    __shared__ </span><span style=\"color: #FF79C6\">float</span><span style=\"color: #F8F8F2\"> A_S[TILE_DIM][TILE_DIM];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    __shared__ </span><span style=\"color: #FF79C6\">float</span><span style=\"color: #F8F8F2\"> B_S[TILE_DIM][TILE_DIM];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> tx </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> threadIdx.x;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> ty </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> threadIdx.y;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> bx </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> blockIdx.x;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> by </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> blockIdx.y;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> row </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> by </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> TILE_DIM </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> ty;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> col </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> bx </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> TILE_DIM </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> tx;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">float</span><span style=\"color: #F8F8F2\"> value </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> ph </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; ph </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> M </span><span style=\"color: #FF79C6\">/</span><span style=\"color: #F8F8F2\"> TILE_DIM</span><span style=\"color: #FF79C6\">+</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">; ph</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (row </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> N </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> ph </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> TILE_DIM </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> tx </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> M)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            A_S[ty][tx] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> A[row </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> M </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> ph </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> TILE_DIM </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> tx];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">else</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            A_S[ty][tx] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0.0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (col </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> K </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> ph </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> TILE_DIM </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> ty </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> M) </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            B_S[ty][tx] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> B[(ph </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> TILE_DIM </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> ty) </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> K </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> col];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">else</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            B_S[ty][tx] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0.0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">__syncthreads</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> k </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; k </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> TILE_DIM; k</span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            value </span><span style=\"color: #FF79C6\">+=</span><span style=\"color: #F8F8F2\"> A_S[ty][k] </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> B_S[k][tx];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">__syncthreads</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (row </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> N </span><span style=\"color: #FF79C6\">&amp;&amp;</span><span style=\"color: #F8F8F2\"> col </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> K)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        C[row</span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">K</span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\">col]</span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\">value;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;</span></span></code></pre></div><h3 id=\"统计直方图\"><a href=\"#统计直方图\" class=\"headerlink\" title=\"统计直方图\"></a>统计直方图</h3><p><strong>共享内存的使用</strong>：在共享内存开辟临时数组，减少对全局内存的访问，从而提高程序性能。<br><strong>跨网格循环</strong>：数据量很大，一个线程要处理多个数据。<br><strong>原子操作</strong>：无论是共享内存还是全局内存的结果，都需要使用原子操作，避免冲突</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">__global__ </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">histo_kernel</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">unsigned</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">char</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">buffer, </span><span style=\"color: #FF79C6\">long</span><span style=\"color: #F8F8F2\"> size, </span><span style=\"color: #FF79C6\">unsigned</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">histo)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    __shared__ </span><span style=\"color: #FF79C6\">unsigned</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> temp[</span><span style=\"color: #BD93F9\">256</span><span style=\"color: #F8F8F2\">];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    temp[threadIdx.x] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">__syncthreads</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> threadIdx.x </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> blockIdx.x </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> blockDim.x;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> offset </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> blockDim.x </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">gridDim.x;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">while</span><span style=\"color: #F8F8F2\"> (i</span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\">size)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">atomicAdd</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">temp[buffer[i]], </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        i </span><span style=\"color: #FF79C6\">+=</span><span style=\"color: #F8F8F2\"> offset;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">__syncthreads</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">atomicAdd</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">&amp;</span><span style=\"color: #F8F8F2\">(histo[threadIdx.x]), temp[threadIdx.x]);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;</span></span></code></pre></div><h3 id=\"规约求和\"><a href=\"#规约求和\" class=\"headerlink\" title=\"规约求和\"></a>规约求和</h3><p><strong>跨网格循环</strong>：对于海量数据(&gt;100w)，即使是GPU众核，也做不到这么多的线程，因此一个线程要处理多个数据。<br><strong>共享内存优化</strong>：将每个线程对多个元素求和的结果存于共享内存，可以减少对全局内存的访问。<br><strong>交错配对法</strong>：利用交错配对法进行规约，可以缓解一部分的线程束分化现象。<br><strong>原子操作</strong>:将结果累加到全局内存中，可能会发生冲突，需要使用原子操作。</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F8F8F2\">__global__ </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">_sum_gpu</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">input, </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> count, </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">output)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    __shared__ </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> sum_per_block[BLOCK_SIZE];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> temp </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> idx </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> threadIdx.x </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> blockDim.x </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> blockIdx.x;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">         idx </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> count; idx </span><span style=\"color: #FF79C6\">+=</span><span style=\"color: #F8F8F2\"> gridDim.x </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> blockDim.x</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    )</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        temp </span><span style=\"color: #FF79C6\">+=</span><span style=\"color: #F8F8F2\"> input[idx];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    sum_per_block[threadIdx.x] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> temp;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">__syncthreads</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #6272A4\">//**********shared memory summation stage***********</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> length </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> BLOCK_SIZE </span><span style=\"color: #FF79C6\">/</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">; length </span><span style=\"color: #FF79C6\">&gt;=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">; length </span><span style=\"color: #FF79C6\">/=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> double_kill </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (threadIdx.x </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> length)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        double_kill </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> sum_per_block[threadIdx.x] </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> sum_per_block[threadIdx.x </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> length];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">__syncthreads</span><span style=\"color: #F8F8F2\">();</span><span style=\"color: #6272A4\">  //why we need two __syncthreads() here, and,</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (threadIdx.x </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> length)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        sum_per_block[threadIdx.x] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> double_kill;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">__syncthreads</span><span style=\"color: #F8F8F2\">(); </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#125;</span><span style=\"color: #6272A4\"> //the per-block partial sum is sum_per_block[0]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (threadIdx.x </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">) </span><span style=\"color: #50FA7B\">atomicAdd</span><span style=\"color: #F8F8F2\">(output, sum_per_block[</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">]);</span></span>\n<span class=\"line\"></span></code></pre></div><h3 id=\"TOP-K-问题\"><a href=\"#TOP-K-问题\" class=\"headerlink\" title=\"TOP K 问题\"></a>TOP K 问题</h3><p>TOP K问题是指在一组数据中，找到前K个最大或最小的元素。利用CUDA规约计算可以高效地解决TOP K问题。<br>以下是利用CUDA规约计算来实现排序和选择前K个最大&#x2F;最小元素的详细步骤：</p>\n<ol>\n<li>定义一个二元组类型，包含值和索引，用于存储原始数据及其索引（为了在排序后恢复原始数据）</li>\n<li>对原始数据进行遍历，将数据存储到二元组中</li>\n<li>对二元组进行归约操作，得到前K个最大&#x2F;最小值的索引</li>\n<li>恢复原始数据并按照索引排序，得到前K个最大&#x2F;最小值</li>\n</ol>\n<p>具体实现流程如下：</p>\n<ol>\n<li>将数据复制到GPU显存中<br> <code>float *d_data; cudaMemcpy(d_data, h_data, size, cudaMemcpyHostToDevice);</code></li>\n<li>将数据存储到二元组中</li>\n</ol>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">typedef</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">struct</span><span style=\"color: #F8F8F2\"> &#123;     </span><span style=\"color: #FF79C6\">float</span><span style=\"color: #F8F8F2\"> value;     </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> index; &#125; </span><span style=\"color: #8BE9FD; font-style: italic\">Tuple</span><span style=\"color: #F8F8F2\">;  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">Tuple </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">d_tuples; </span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> threadsPerBlock </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">256</span><span style=\"color: #F8F8F2\">; </span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> blocksPerGrid </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (n </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> threadsPerBlock </span><span style=\"color: #FF79C6\">-</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">) </span><span style=\"color: #FF79C6\">/</span><span style=\"color: #F8F8F2\"> threadsPerBlock;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">initializeTuples</span><span style=\"color: #FF79C6\">&lt;&lt;&lt;</span><span style=\"color: #F8F8F2\">blocksPerGrid, threadsPerBlock</span><span style=\"color: #FF79C6\">&gt;&gt;&gt;</span><span style=\"color: #F8F8F2\">(d_data, d_tuples, n);</span></span></code></pre></div><ol start=\"3\">\n<li>对二元组进行归约操作，得到前K个最大&#x2F;最小值的索引</li>\n</ol>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">d_indices;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">kReduceKernel</span><span style=\"color: #FF79C6\">&lt;&lt;&lt;</span><span style=\"color: #F8F8F2\">blocksPerGrid, threadsPerBlock</span><span style=\"color: #FF79C6\">&gt;&gt;&gt;</span><span style=\"color: #F8F8F2\">(d_tuples, d_indices, n, k);</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">__global__ </span><span style=\"color: #FF79C6\">void</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">kReduceKernel</span><span style=\"color: #F8F8F2\">(Tuple </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">input, </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\">output, </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> n, </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> k) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">extern</span><span style=\"color: #F8F8F2\"> __shared__ Tuple shared[];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> tid </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> threadIdx.x;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> blockIdx.x </span><span style=\"color: #FF79C6\">*</span><span style=\"color: #F8F8F2\"> blockDim.x </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> threadIdx.x;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    shared[tid] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (i </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> n) </span><span style=\"color: #FF79C6\">?</span><span style=\"color: #F8F8F2\"> input[i] </span><span style=\"color: #FF79C6\">:</span><span style=\"color: #F8F8F2\"> Tuple&#123;</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">, </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">&#125;;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #50FA7B\">__syncthreads</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> s </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> blockDim.x </span><span style=\"color: #FF79C6\">/</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">2</span><span style=\"color: #F8F8F2\">; s </span><span style=\"color: #FF79C6\">&gt;</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; s </span><span style=\"color: #FF79C6\">&gt;&gt;=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">1</span><span style=\"color: #F8F8F2\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (tid </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> s)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">            shared[tid] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> (shared[tid].value </span><span style=\"color: #FF79C6\">&gt;</span><span style=\"color: #F8F8F2\"> shared[tid </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> s].value) </span><span style=\"color: #FF79C6\">?</span><span style=\"color: #F8F8F2\"> shared[tid] </span><span style=\"color: #FF79C6\">:</span><span style=\"color: #F8F8F2\"> shared[tid </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> s];</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        </span><span style=\"color: #50FA7B\">__syncthreads</span><span style=\"color: #F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">if</span><span style=\"color: #F8F8F2\"> (tid </span><span style=\"color: #FF79C6\">==</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">        output[blockIdx.x] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> shared[</span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">].index;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;</span></span></code></pre></div><ol start=\"5\">\n<li>在CPU中恢复原始数据并按照索引排序，得到前K个最大&#x2F;最小值</li>\n</ol>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">cpp</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #50FA7B\">cudaMemcpy</span><span style=\"color: #F8F8F2\">(h_indices, d_indices, size, cudaMemcpyDeviceToHost);  </span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">for</span><span style=\"color: #F8F8F2\"> (</span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> i </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #BD93F9\">0</span><span style=\"color: #F8F8F2\">; i </span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\"> k; </span><span style=\"color: #FF79C6\">++</span><span style=\"color: #F8F8F2\">i) &#123;     </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">int</span><span style=\"color: #F8F8F2\"> index </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> h_indices[i];     </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    h_result[i] </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> h_data[index]; &#125;  </span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">std</span><span style=\"color: #FF79C6\">::</span><span style=\"color: #50FA7B\">sort</span><span style=\"color: #F8F8F2\">(h_result, h_result </span><span style=\"color: #FF79C6\">+</span><span style=\"color: #F8F8F2\"> k);</span></span></code></pre></div><p>完成以上步骤后，就可以得到排序后的前K个最大&#x2F;最小值了。</p>\n<h2 id=\"实验感受\"><a href=\"#实验感受\" class=\"headerlink\" title=\"实验感受\"></a>实验感受</h2>","text":"实验目的 掌握CUDA网格和线程块的设计 实践CUDA运行时API的使用 通过编写核函数，掌握利用GPU众核对大规模问题的求解加速的方法 体会CPU多核与GPU...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"大数据","slug":"大数据","count":11,"path":"api/categories/大数据.json"}],"tags":[{"name":"学习笔记","slug":"学习笔记","count":17,"path":"api/tags/学习笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%AA%8C%E7%9B%AE%E7%9A%84\"><span class=\"toc-text\">实验目的</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%AA%8C%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">实验内容</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9F%A9%E9%98%B5%E8%BD%AC%E7%BD%AE\"><span class=\"toc-text\">矩阵转置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">算法流程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9F%A9%E9%98%B5%E7%9B%B8%E4%B9%98\"><span class=\"toc-text\">矩阵相乘</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%87%BD%E6%95%B0%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">核函数设计</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-1\"><span class=\"toc-text\">代码实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%9F%E8%AE%A1%E7%9B%B4%E6%96%B9%E5%9B%BE\"><span class=\"toc-text\">统计直方图</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%84%E7%BA%A6%E6%B1%82%E5%92%8C\"><span class=\"toc-text\">规约求和</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TOP-K-%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">TOP K 问题</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%AA%8C%E6%84%9F%E5%8F%97\"><span class=\"toc-text\">实验感受</span></a></li></ol>","author":{"name":"以太工坊","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"分享我的课程学习笔记、经验与有趣的小玩意.图片等资源无法加载时请使用代理","socials":{"github":"https://github.com/Tim-Saijun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"telegram":{"icon":"/img/telegram.svg","link":"https://t.me/tim_run"},"Email":{"icon":"/img/mail.svg","link":"mailto:b@zair.top"},"RSS":{"icon":"/img/rss.svg","link":"/atom.xml"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"并行计算复习课","uid":"339231bc7dd528f94b3eb2f74a68d4df","slug":"并行计算复习课","date":"2023-05-11T08:38:15.000Z","updated":"2024-02-22T03:52:13.965Z","comments":true,"path":"api/articles/并行计算复习课.json","keywords":"计算机技术,大数据,人工智能","cover":[],"text":"复习课第一章 Amdal 定律 对定律的理解（任务不变的情况下，速度的提升、加速比）、加速的极限应用题 6’*5网格和线程块的布局，计算全局id并行、并发、线程...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"大数据","slug":"大数据","count":11,"path":"api/categories/大数据.json"}],"tags":[{"name":"学习笔记","slug":"学习笔记","count":17,"path":"api/tags/学习笔记.json"}],"author":{"name":"以太工坊","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"分享我的课程学习笔记、经验与有趣的小玩意.图片等资源无法加载时请使用代理","socials":{"github":"https://github.com/Tim-Saijun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"telegram":{"icon":"/img/telegram.svg","link":"https://t.me/tim_run"},"Email":{"icon":"/img/mail.svg","link":"mailto:b@zair.top"},"RSS":{"icon":"/img/rss.svg","link":"/atom.xml"}}}}},"next_post":{"title":"概率论","uid":"243ac045dab981a42c4921f3f7cacfa2","slug":"概率论","date":"2023-04-21T12:10:13.000Z","updated":"2024-02-22T03:52:13.965Z","comments":true,"path":"api/articles/概率论.json","keywords":"计算机技术,大数据,人工智能","cover":null,"text":"主要参考 贝叶斯公式 贝叶斯学派认为没有什么是随机的，如果有，那一定是信息不够（香农信息论）；贝叶斯学派（统计学）-&gt; 贝叶斯学习(机器学习) 贝叶斯公式...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"数学","slug":"数学","count":2,"path":"api/categories/数学.json"}],"tags":[{"name":"学习笔记","slug":"学习笔记","count":17,"path":"api/tags/学习笔记.json"},{"name":"统计学","slug":"统计学","count":1,"path":"api/tags/统计学.json"}],"author":{"name":"以太工坊","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"分享我的课程学习笔记、经验与有趣的小玩意.图片等资源无法加载时请使用代理","socials":{"github":"https://github.com/Tim-Saijun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"telegram":{"icon":"/img/telegram.svg","link":"https://t.me/tim_run"},"Email":{"icon":"/img/mail.svg","link":"mailto:b@zair.top"},"RSS":{"icon":"/img/rss.svg","link":"/atom.xml"}}}}}}