{"title":"Flink重写watermark","uid":"42e97344b39e28a5e2b53d7a94abab91","slug":"Flink重写Watermark","date":"2022-11-30T08:00:00.000Z","updated":"2024-02-22T03:52:13.945Z","comments":true,"path":"api/articles/Flink重写Watermark.json","keywords":"计算机技术,大数据,人工智能","cover":null,"content":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>时间信息是形如”2022&#x2F;10&#x2F;22 10:34”的字符串，怎样针对这种时间信息，为Flink重写assignTimestampsAndWatermarks</p></blockquote>\n<p>如果这个字符串已经被解析为一个Java时间对象，例如java.util.Date或java.time.Instant，那么可以在assignTimestampsAndWatermarks函数中将它作为参数传入。例如：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #8BE9FD; font-style: italic\">Copy</span><span style=\"color: #F8F8F2\"> codeDataStream</span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\">YourType</span><span style=\"color: #FF79C6\">&gt;</span><span style=\"color: #F8F8F2\"> stream </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> ...;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6272A4\">// 假设eventTime是java.util.Date类型</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">stream.</span><span style=\"color: #50FA7B\">assignTimestampsAndWatermarks</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">BoundedOutOfOrdernessTimestampExtractor</span><span style=\"color: #F8F8F2\">&lt;YourType&gt;(Time.</span><span style=\"color: #50FA7B\">seconds</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">10</span><span style=\"color: #F8F8F2\">)) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    @</span><span style=\"color: #8BE9FD; font-style: italic\">Override</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #50FA7B\"> </span><span style=\"color: #8BE9FD; font-style: italic\">long</span><span style=\"color: #50FA7B\"> extractTimestamp(</span><span style=\"color: #8BE9FD; font-style: italic\">YourType</span><span style=\"color: #50FA7B\"> </span><span style=\"color: #FFB86C; font-style: italic\">element</span><span style=\"color: #50FA7B\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #50FA7B\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #50FA7B\"> </span><span style=\"color: #F8F8F2\">element</span><span style=\"color: #50FA7B\">.getEventTime().getTime();</span></span>\n<span class=\"line\"><span style=\"color: #50FA7B\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;);</span></span></code></pre></div><p>如果字符串未被解析为Java时间对象，则需要先将其解析为一个时间对象，然后再在assignTimestampsAndWatermarks函数中使用它。可以使用SimpleDateFormat类来解析时间字符串：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\" onclick=\"copyCode(this)\"></button><span class=\"lang\">java</span><pre class=\"shiki dracula\" style=\"background-color: #282A36\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #8BE9FD; font-style: italic\">Copy</span><span style=\"color: #F8F8F2\"> codeDataStream</span><span style=\"color: #FF79C6\">&lt;</span><span style=\"color: #F8F8F2\">YourType</span><span style=\"color: #FF79C6\">&gt;</span><span style=\"color: #F8F8F2\"> stream </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> ...;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6272A4\">// 假设timeString是&quot;2022/10/22 10:34&quot;这样的字符串，并且它已经被解析为java.util.Date类型</span></span>\n<span class=\"line\"><span style=\"color: #8BE9FD; font-style: italic\">SimpleDateFormat</span><span style=\"color: #F8F8F2\"> format </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #50FA7B\">SimpleDateFormat</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #E9F284\">&quot;</span><span style=\"color: #F1FA8C\">yyyy/MM/dd HH:mm</span><span style=\"color: #E9F284\">&quot;</span><span style=\"color: #F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color: #FF79C6\">final</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">Date</span><span style=\"color: #F8F8F2\"> eventTime </span><span style=\"color: #FF79C6\">=</span><span style=\"color: #F8F8F2\"> format.</span><span style=\"color: #50FA7B\">parse</span><span style=\"color: #F8F8F2\">(timeString);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">stream.</span><span style=\"color: #50FA7B\">assignTimestampsAndWatermarks</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #FF79C6; font-weight: bold\">new</span><span style=\"color: #F8F8F2\"> </span><span style=\"color: #8BE9FD; font-style: italic\">BoundedOutOfOrdernessTimestampExtractor</span><span style=\"color: #F8F8F2\">&lt;YourType&gt;(Time.</span><span style=\"color: #50FA7B\">seconds</span><span style=\"color: #F8F8F2\">(</span><span style=\"color: #BD93F9\">10</span><span style=\"color: #F8F8F2\">)) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    @</span><span style=\"color: #8BE9FD; font-style: italic\">Override</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">    </span><span style=\"color: #FF79C6\">public</span><span style=\"color: #50FA7B\"> </span><span style=\"color: #8BE9FD; font-style: italic\">long</span><span style=\"color: #50FA7B\"> extractTimestamp(</span><span style=\"color: #8BE9FD; font-style: italic\">YourType</span><span style=\"color: #50FA7B\"> </span><span style=\"color: #FFB86C; font-style: italic\">element</span><span style=\"color: #50FA7B\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #50FA7B\">        </span><span style=\"color: #FF79C6\">return</span><span style=\"color: #50FA7B\"> </span><span style=\"color: #F8F8F2\">eventTime</span><span style=\"color: #50FA7B\">.getTime();</span></span>\n<span class=\"line\"><span style=\"color: #50FA7B\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #F8F8F2\">&#125;);</span></span></code></pre></div><p>需要注意的是，在实际的Flink程序中，需要确保这些代码在并行执行的情况下也能正常工作。例如，如果在一个MapFunction中使用了SimpleDateFormat类，那么这个类必须是线程安全的，否则会导致程序出错。</p>\n","text":"问题 时间信息是形如”2022&#x2F;10&#x2F;22 10:34”的字符串，怎样针对这种时间信息，为Flink重写assignTimestampsAn...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"大数据","slug":"大数据","count":11,"path":"api/categories/大数据.json"}],"tags":[{"name":"Flink","slug":"Flink","count":1,"path":"api/tags/Flink.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">问题</span></a></li></ol>","author":{"name":"以太工坊","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"分享我的课程学习笔记、经验与有趣的小玩意.图片等资源无法加载时请使用代理","socials":{"github":"https://github.com/Tim-Saijun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"telegram":{"icon":"/img/telegram.svg","link":"https://t.me/tim_run"},"Email":{"icon":"/img/mail.svg","link":"mailto:b@zair.top"},"RSS":{"icon":"/img/rss.svg","link":"/atom.xml"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"HDFS无法访问问题","uid":"5effef9964d08a5f1e7458f8f066fb6c","slug":"HDFS无法访问问题","date":"2022-12-19T08:00:00.000Z","updated":"2024-02-22T03:52:13.945Z","comments":true,"path":"api/articles/HDFS无法访问问题.json","keywords":"计算机技术,大数据,人工智能","cover":null,"text":"问题描述三个datanode、一个namenode和一个secondary namenode组成的hadoop集群，输入命令查看状态如下，一切正常。 shell...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"大数据","slug":"大数据","count":11,"path":"api/categories/大数据.json"}],"tags":[{"name":"Hadoop","slug":"Hadoop","count":2,"path":"api/tags/Hadoop.json"},{"name":"HDFS","slug":"HDFS","count":1,"path":"api/tags/HDFS.json"}],"author":{"name":"以太工坊","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"分享我的课程学习笔记、经验与有趣的小玩意.图片等资源无法加载时请使用代理","socials":{"github":"https://github.com/Tim-Saijun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"telegram":{"icon":"/img/telegram.svg","link":"https://t.me/tim_run"},"Email":{"icon":"/img/mail.svg","link":"mailto:b@zair.top"},"RSS":{"icon":"/img/rss.svg","link":"/atom.xml"}}}}},"next_post":{"title":"大数据架构课程复习","uid":"aed368cc9508713312cce045a68b1789","slug":"大数据架构复习","date":"2022-11-12T08:00:00.000Z","updated":"2024-02-22T03:52:13.965Z","comments":true,"path":"api/articles/大数据架构复习.json","keywords":"计算机技术,大数据,人工智能","cover":[],"text":"导论大数据系统的需求包括（ ）。 数据需求 功能需求 性能需求（高性能、高可用、高可扩展、高容错、安全性等） 计算场景需求分布式系统&#x2F;集群 or 大数...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"大数据","slug":"大数据","count":11,"path":"api/categories/大数据.json"}],"tags":[{"name":"学习笔记","slug":"学习笔记","count":17,"path":"api/tags/学习笔记.json"},{"name":"Hadoop","slug":"Hadoop","count":2,"path":"api/tags/Hadoop.json"},{"name":"大数据","slug":"大数据","count":1,"path":"api/tags/大数据.json"},{"name":"大数据架构","slug":"大数据架构","count":1,"path":"api/tags/大数据架构.json"},{"name":"MapReduce","slug":"MapReduce","count":1,"path":"api/tags/MapReduce.json"},{"name":"Spark","slug":"Spark","count":1,"path":"api/tags/Spark.json"},{"name":"Kafka","slug":"Kafka","count":1,"path":"api/tags/Kafka.json"},{"name":"云计算","slug":"云计算","count":1,"path":"api/tags/云计算.json"}],"author":{"name":"以太工坊","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"分享我的课程学习笔记、经验与有趣的小玩意.图片等资源无法加载时请使用代理","socials":{"github":"https://github.com/Tim-Saijun","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"telegram":{"icon":"/img/telegram.svg","link":"https://t.me/tim_run"},"Email":{"icon":"/img/mail.svg","link":"mailto:b@zair.top"},"RSS":{"icon":"/img/rss.svg","link":"/atom.xml"}}}}}}